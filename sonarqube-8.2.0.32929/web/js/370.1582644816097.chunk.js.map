{"version":3,"sources":["webpack:///./src/main/js/apps/overview/pullRequests/AfterMergeEstimate.tsx","webpack:///./src/main/js/apps/overview/pullRequests/LargeQualityGateBadge.tsx","webpack:///./src/main/js/apps/overview/pullRequests/PullRequestOverview.tsx"],"names":["pullRequests_AfterMergeEstimate","index_js_exposed","_a","className","measures","type","afterMergeMetric","Object","utils","measure","helpers_measures","undefined","value","classnames","sonar_ui_common_helpers_measures","l10n","pullRequests_LargeQualityGateBadge","component","level","success","path","qualityGate","urls","key","failed","HelpTooltip_default","a","overlay","index_es","defaultMessage","id","values","link","react_router_es","to","HelpIcon_default","fill","theme","transparentWhite","size","PullRequestOverview_PullRequestOverview","_super","PullRequestOverview","_this","apply","this","arguments","mounted","state","loading","fetchBranchData","props","branchLike","setState","Promise","all","api_measures","__assign","additionalFields","branch_like","fetchBranchStatus","then","_b","metrics","__extends","prototype","componentDidMount","componentWillUnmount","render","conditions","ignoredConditions","status","failedConditions","filter","condition","map","c","types","has-conditions","length","Alert","display","variant","DocTooltip","doc","resolve","__webpack_require__","bind","QualityGateConditions","collapsible","Bug","Vulnerability","SecurityHotspot","CodeSmell","IssueLabel","useDiffMetric","IssueRating","Coverage","Duplication","MeasurementLabel","mapDispatchToProps","rootActions","__webpack_exports__","es","rootReducer"],"mappings":"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","file":"js/370.1582644816097.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { findMeasure } from '../../../helpers/measures';\nimport { getMeasurementAfterMergeMetricKey, MeasurementType } from '../utils';\n\nexport interface AfterMergeEstimateProps {\n  className?: string;\n  measures: T.MeasureEnhanced[];\n  type: MeasurementType;\n}\n\nexport function AfterMergeEstimate({ className, measures, type }: AfterMergeEstimateProps) {\n  const afterMergeMetric = getMeasurementAfterMergeMetricKey(type);\n\n  const measure = findMeasure(measures, afterMergeMetric);\n\n  if (!measure || measure.value === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(className, 'display-flex-center')}>\n      <span className=\"huge\">{formatMeasure(measure.value, 'PERCENT')}</span>\n      <span className=\"label flex-1 spacer-left text-right\">\n        {translate('component_measures.facet_category.overall_category.estimated')}\n      </span>\n    </div>\n  );\n}\n\nexport default React.memo(AfterMergeEstimate);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport HelpIcon from 'sonar-ui-common/components/icons/HelpIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getQualityGatesUrl, getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  component: T.Component;\n  level?: T.Status;\n}\n\nexport function LargeQualityGateBadge({ component, level }: Props) {\n  const success = level === 'OK';\n\n  const path =\n    component.qualityGate === undefined\n      ? getQualityGatesUrl()\n      : getQualityGateUrl(component.qualityGate.key);\n\n  return (\n    <div\n      className={classNames('overview-quality-gate-badge-large small', {\n        failed: !success,\n        success\n      })}>\n      <div className=\"display-flex-center\">\n        <span>{translate('overview.on_new_code_long')}</span>\n\n        <HelpTooltip\n          className=\"little-spacer-left\"\n          overlay={\n            <FormattedMessage\n              defaultMessage={translate('overview.quality_gate.conditions_on_new_code')}\n              id=\"overview.quality_gate.conditions_on_new_code\"\n              values={{\n                link: <Link to={path}>{translate('overview.quality_gate')}</Link>\n              }}\n            />\n          }>\n          <HelpIcon fill={colors.transparentWhite} size={12} />\n        </HelpTooltip>\n      </div>\n      {level !== undefined && (\n        <h3 className=\"huge-spacer-top huge\">{translate('metric.level', level)}</h3>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(LargeQualityGateBadge);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { getMeasuresAndMeta } from '../../../api/measures';\nimport DocTooltip from '../../../components/docs/DocTooltip';\nimport { getBranchLikeQuery } from '../../../helpers/branch-like';\nimport { enhanceConditionWithMeasure, enhanceMeasuresWithMetrics } from '../../../helpers/measures';\nimport { fetchBranchStatus } from '../../../store/rootActions';\nimport { getBranchStatusByBranchLike, Store } from '../../../store/rootReducer';\nimport { BranchLike, PullRequest } from '../../../types/branch-like';\nimport { QualityGateStatusCondition } from '../../../types/quality-gates';\nimport IssueLabel from '../components/IssueLabel';\nimport IssueRating from '../components/IssueRating';\nimport MeasurementLabel from '../components/MeasurementLabel';\nimport QualityGateConditions from '../components/QualityGateConditions';\nimport '../styles.css';\nimport { IssueType, MeasurementType, PR_METRICS } from '../utils';\nimport AfterMergeEstimate from './AfterMergeEstimate';\nimport LargeQualityGateBadge from './LargeQualityGateBadge';\n\ninterface Props {\n  branchLike: PullRequest;\n  component: T.Component;\n  conditions?: QualityGateStatusCondition[];\n  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => Promise<void>;\n  ignoredConditions?: boolean;\n  status?: T.Status;\n}\n\ninterface State {\n  loading: boolean;\n  measures: T.MeasureEnhanced[];\n}\n\nexport class PullRequestOverview extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  state: State = {\n    loading: false,\n    measures: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranchData();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchBranchData = () => {\n    const {\n      branchLike,\n      component: { key }\n    } = this.props;\n\n    this.setState({ loading: true });\n\n    Promise.all([\n      getMeasuresAndMeta(key, PR_METRICS, {\n        additionalFields: 'metrics',\n        ...getBranchLikeQuery(branchLike)\n      }),\n      this.props.fetchBranchStatus(branchLike, key)\n    ]).then(\n      ([{ component, metrics }]) => {\n        if (this.mounted && component.measures) {\n          this.setState({\n            loading: false,\n            measures: enhanceMeasuresWithMetrics(component.measures || [], metrics || [])\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  render() {\n    const { branchLike, component, conditions, ignoredConditions, status } = this.props;\n    const { loading, measures } = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"page page-limited\">\n          <i className=\"spinner\" />\n        </div>\n      );\n    }\n\n    if (conditions === undefined) {\n      return null;\n    }\n\n    const failedConditions = conditions\n      .filter(condition => condition.level === 'ERROR')\n      .map(c => enhanceConditionWithMeasure(c, measures))\n      .filter(isDefined);\n\n    return (\n      <div className=\"page page-limited\">\n        <div\n          className={classNames('pr-overview', {\n            'has-conditions': failedConditions.length > 0\n          })}>\n          {ignoredConditions && (\n            <Alert className=\"big-spacer-bottom\" display=\"inline\" variant=\"info\">\n              <span className=\"text-middle\">\n                {translate('overview.quality_gate.ignored_conditions')}\n              </span>\n              <HelpTooltip\n                className=\"spacer-left\"\n                overlay={translate('overview.quality_gate.ignored_conditions.tooltip')}\n              />\n            </Alert>\n          )}\n          <div className=\"display-flex-row\">\n            <div className=\"big-spacer-right\">\n              <h2 className=\"overview-panel-title spacer-bottom small\">\n                {translate('overview.quality_gate')}\n                <DocTooltip\n                  className=\"spacer-left\"\n                  doc={import(\n                    /* webpackMode: \"eager\" */ 'Docs/tooltips/quality-gates/project-homepage-quality-gate.md'\n                  )}\n                />\n              </h2>\n              <LargeQualityGateBadge component={component} level={status} />\n            </div>\n\n            {failedConditions.length > 0 && (\n              <div className=\"pr-overview-failed-conditions big-spacer-right\">\n                <h2 className=\"overview-panel-title spacer-bottom small\">\n                  {translate('overview.failed_conditions')}\n                </h2>\n                <QualityGateConditions\n                  branchLike={branchLike}\n                  collapsible={true}\n                  component={component}\n                  failedConditions={failedConditions}\n                />\n              </div>\n            )}\n\n            <div className=\"flex-1\">\n              <h2 className=\"overview-panel-title spacer-bottom small\">\n                {translate('overview.measures')}\n              </h2>\n\n              <div className=\"overview-panel-content\">\n                {[\n                  IssueType.Bug,\n                  IssueType.Vulnerability,\n                  IssueType.SecurityHotspot,\n                  IssueType.CodeSmell\n                ].map((type: IssueType) => (\n                  <div className=\"overview-measures-row display-flex-row\" key={type}>\n                    <div className=\"overview-panel-big-padded flex-1 small display-flex-center\">\n                      <IssueLabel\n                        branchLike={branchLike}\n                        component={component}\n                        measures={measures}\n                        type={type}\n                        useDiffMetric={true}\n                      />\n                    </div>\n                    <div className=\"overview-panel-big-padded overview-measures-aside display-flex-center\">\n                      <IssueRating\n                        branchLike={branchLike}\n                        component={component}\n                        measures={measures}\n                        type={type}\n                        useDiffMetric={true}\n                      />\n                    </div>\n                  </div>\n                ))}\n\n                {[MeasurementType.Coverage, MeasurementType.Duplication].map(\n                  (type: MeasurementType) => (\n                    <div className=\"overview-measures-row display-flex-row\" key={type}>\n                      <div className=\"overview-panel-big-padded flex-1 small display-flex-center\">\n                        <MeasurementLabel\n                          branchLike={branchLike}\n                          component={component}\n                          measures={measures}\n                          type={type}\n                          useDiffMetric={true}\n                        />\n                      </div>\n\n                      <AfterMergeEstimate\n                        className=\"overview-panel-big-padded overview-measures-aside text-right overview-measures-emphasis\"\n                        measures={measures}\n                        type={type}\n                      />\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store, { branchLike, component }: Props) => {\n  const { conditions, ignoredConditions, status } = getBranchStatusByBranchLike(\n    state,\n    component.key,\n    branchLike\n  );\n  return { conditions, ignoredConditions, status };\n};\n\nconst mapDispatchToProps = { fetchBranchStatus: fetchBranchStatus as any };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PullRequestOverview);\n"],"sourceRoot":""}