{"version":3,"sources":["webpack:///./src/main/js/apps/projectActivity/utils.ts","webpack:///./src/main/js/app/components/ComponentContext.tsx","webpack:///./src/main/js/api/projectActivity.ts","webpack:///./src/main/js/apps/projectActivity/components/DefinitionChangeEventInner.tsx","webpack:///./src/main/js/apps/projectActivity/components/RichQualityGateEventInner.tsx","webpack:///./src/main/js/api/newCodePeriod.ts","webpack:///./src/main/js/apps/projectBaseline/utils.ts","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingDays.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingPreviousVersion.tsx","webpack:///./src/main/js/apps/projectActivity/components/EventInner.tsx","webpack:///./src/main/js/apps/projectActivity/components/forms/ChangeEventForm.tsx","webpack:///./src/main/js/apps/projectActivity/components/forms/RemoveEventForm.tsx","webpack:///./src/main/js/apps/projectActivity/components/Event.tsx","webpack:///./src/main/js/apps/projectActivity/components/Events.tsx","webpack:///./src/main/js/apps/projectBaseline/styles.css?3c1d","webpack:///./src/main/js/apps/projectBaseline/styles.css","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingAnalysis.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchAnalysisList.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchBaselineSettingModal.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchList.tsx","webpack:///./src/main/js/apps/projectBaseline/components/ProjectBaselineSelector.tsx","webpack:///./src/main/js/apps/projectBaseline/components/App.tsx","webpack:///./src/main/js/apps/projectBaseline/components/AppContainer.ts","webpack:///./src/main/js/app/components/embed-docs-modal/Suggestions.tsx","webpack:///./src/main/js/components/intl/DateTimeFormatter.tsx","webpack:///./src/main/js/components/intl/DateFormatter.tsx","webpack:///./src/main/js/types/metrics.ts","webpack:///./src/main/js/components/activity-graph/utils.ts","webpack:///./src/main/js/types/project-activity.ts","webpack:///./src/main/js/components/intl/TimeFormatter.tsx","webpack:///./src/main/js/components/icons/BranchLikeIcon.tsx"],"names":["EVENT_TYPES","APPLICATION_EVENT_TYPES","activityQueryChanged","prevQuery","nextQuery","category","datesQueryChanged","customMetricsChanged","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default","customMetrics","from","to","historyQueryChanged","graph","getAnalysesByVersionByDay","analyses","query","reduce","acc","analysis","currentVersion","length","versionEvent","events","find","event","newVersion","version","name","key","byDay","Object","keys","push","day","date_fns_start_of_day__WEBPACK_IMPORTED_MODULE_1__","sonar_ui_common_helpers_dates__WEBPACK_IMPORTED_MODULE_2__","date","getTime","toString","matchFilters","isAfterFrom","isBeforeTo","hasSelectedCategoryEvents","parseQuery","urlQuery","sonar_ui_common_helpers_query__WEBPACK_IMPORTED_MODULE_3__","value","_types_project_activity__WEBPACK_IMPORTED_MODULE_5__","includes","_components_activity_graph_utils__WEBPACK_IMPORTED_MODULE_4__","project","selectedDate","serializeQuery","serializeUrlQuery","custom_metrics","undefined","id","selected_date","__webpack_require__","d","__webpack_exports__","ComponentContext","react__WEBPACK_IMPORTED_MODULE_0__","branchLike","component","getProjectActivity","createEvent","deleteEvent","changeEvent","deleteAnalysis","sonar_ui_common_helpers_request__WEBPACK_IMPORTED_MODULE_0__","_app_utils_throwGlobalError__WEBPACK_IMPORTED_MODULE_1__","data","catch","description","then","r","isDefinitionChangeEvent","definitionChange","DefinitionChangeEventInner","_super","_this","apply","this","arguments","state","expanded","stopPropagation","toggleProjectsList","setState","renderProjectLink","branch","react_router__WEBPACK_IMPORTED_MODULE_2__","onClick","title","_helpers_urls__WEBPACK_IMPORTED_MODULE_9__","sonar_ui_common_helpers_path__WEBPACK_IMPORTED_MODULE_7__","renderBranch","sonar_ui_common_helpers_l10n__WEBPACK_IMPORTED_MODULE_6__","className","sonar_ui_common_components_icons_BranchIcon__WEBPACK_IMPORTED_MODULE_4___default","a","__extends","prototype","renderProjectChange","mainBranch","props","_helpers_branch_like__WEBPACK_IMPORTED_MODULE_8__","changeType","message","react_intl__WEBPACK_IMPORTED_MODULE_1__","defaultMessage","values","newBranch","oldBranch","render","sonar_ui_common_components_controls_buttons__WEBPACK_IMPORTED_MODULE_3__","sonar_ui_common_components_icons_DropdownIcon__WEBPACK_IMPORTED_MODULE_5___default","turned","projects","map","isRichQualityGateEvent","qualityGate","RichQualityGateEventInner","stillFailing","status","sonar_ui_common_components_ui_Level__WEBPACK_IMPORTED_MODULE_5___default","level","small","failing","sonar_ui_common_components_icons_DropdownIcon__WEBPACK_IMPORTED_MODULE_4___default","aria-label","_helpers_urls__WEBPACK_IMPORTED_MODULE_7__","getNewCodePeriod","setNewCodePeriod","resetNewCodePeriod","listBranchesNewCodePeriod","validateDays","days","parsed","parseInt","isNaN","String","getSettingValue","_a","type","validateSetting","currentSetting","currentSettingValue","selected","overrideGeneralSetting","isChanged","isValid","BaselineSettingDays","sonar_ui_common_components_controls_RadioCard__WEBPACK_IMPORTED_MODULE_1__","sonar_ui_common_components_controls_RadioCard__WEBPACK_IMPORTED_MODULE_1___default","n","sonar_ui_common_components_controls_ValidationInput__WEBPACK_IMPORTED_MODULE_2__","sonar_ui_common_components_controls_ValidationInput__WEBPACK_IMPORTED_MODULE_2___default","sonar_ui_common_helpers_l10n__WEBPACK_IMPORTED_MODULE_3__","disabled","onChangeDays","onSelect","error","isInvalid","label","required","onChange","e","currentTarget","BaselineSettingPreviousVersion","sonar_ui_common_helpers_l10n__WEBPACK_IMPORTED_MODULE_2__","isDefault","EventInner","index_js_exposed","Consumer","content","l10n","Tooltip_default","overlay","ChangeEventForm","call","changeInput","target","handleSubmit","ConfirmModal_default","confirmButtonText","confirmDisable","header","onClose","onConfirm","size","autoFocus","RemoveEventForm","analysisKey","removeEventQuestion","isDestructive","components_Event","canAdmin","isFirst","changing","setChanging","_b","deleting","setDeleting","isOther","isVersion","canChange","canDelete","onDelete","showActions","ProjectEventIcon_default","classnames","buttons","data-test","forms_ChangeEventForm","sortedEvents","sortBy_default","module","i","options","hmr","transform","insertInto","locals","exports","BaselineSettingAnalysis","RadioCard_default","BranchAnalysisList","mounted","badges","loading","range","scroll","handleScroll","updateScroll","scrollTop","registerBadgeNode","el","getAttribute","setAttribute","offsetTop","shouldStick","badge","Number","handleRangeChange","fetchAnalyses","rootNodeRef","throttle_default","componentDidMount","componentWillUnmount","scrollToSelected","selectedNode","document","querySelector","current","scrolling","parent","bottomOffset","initial","projectActivity","dates","date_fns","Date","result","__assign","getRangeOptions","byVersionByDay","projectActivity_utils","hasFilteredData","Select_default","autoBlur","clearable","searchable","onScroll","ref","DeferredSpinner_default","idx","first","sticky","mouseEnterDelay","data-day","DateFormatter","long","data-date","valueOf","onSelectAnalysis","TimeFormatter","formattedTime","dateTime","toISOString","Events","is-checked","BranchBaselineSettingModal","preventDefault","analysisDate","utils","saving","api_newCodePeriod","effectiveValue","requestClose","handleSelectAnalysis","handleSelectDays","handleSelectSetting","getValueFromProps","newCodePeriod","BranchBaselineSettingModal_extends","Modal_default","contentLabel","onRequestClose","onSubmit","role","components_BranchAnalysisList","BranchList","branches","updateBranchNewCodePeriod","newSetting","updated","b","slice","openEditModal","editedBranch","closeEditModal","BranchList_extends","fetchBranches","sortAndFilterBranches","branchLikes","branch_like","filter","sortedBranches","branchSettings","newCodePeriods","ncp","inherited","branchesWithBaseline","branchKey","BranchList_assign","resetToDefault","renderNewCodePeriodSetting","DateTimeFormatter","BranchLikeIcon","isMain","ActionsDropdown_default","ActionsDropdown","components_BranchBaselineSettingModal","ProjectBaselineSelector","branchesEnabled","generalSetting","Radio_default","checked","onCheck","onToggleSpecificSetting","setting","renderGeneralSetting","onSelectSetting","onSelectDays","invisible","onCancel","DEFAULT_GENERAL_SETTING","App","resetSuccess","debounce_default","success","resetSetting","handleCancel","getUpdatedState","handleToggleSpecificSetting","App_extends","fetchLeakPeriodSetting","params","defaultDays","Boolean","Promise","all","renderHeader","index_es","link","react_router_es","Suggestions","suggestions","AlertSuccessIcon_default","components_BranchList","inheritedSetting","es","rootReducer","components_App","_SuggestionsContext__WEBPACK_IMPORTED_MODULE_1__","addSuggestions","removeSuggestions","SuggestionsInner","componentDidUpdate","prevProps","formatterOption","year","month","hour","minute","children","longFormatterOption","MetricKey","isMetricKey","DEFAULT_GRAPH","_types_project_activity__WEBPACK_IMPORTED_MODULE_8__","issues","GRAPHS_METRICS_DISPLAYED","_types_metrics__WEBPACK_IMPORTED_MODULE_7__","bugs","code_smells","vulnerabilities","coverage","lines_to_cover","uncovered_lines","duplications","ncloc","duplicated_lines","GRAPHS_METRICS","concat","reliability_rating","security_rating","sqale_rating","__spreadArrays","duplicated_lines_density","isCustomGraph","custom","getGraphTypes","ignoreCustom","graphs","hasDataValues","serie","some","point","y","hasHistoryData","series","getSeriesMetricType","getDisplayedHistoryMetrics","getHistoryMetrics","splitSeriesInGraphs","maxGraph","maxSeries","lodash_flatMap__WEBPACK_IMPORTED_MODULE_2___default","lodash_groupBy__WEBPACK_IMPORTED_MODULE_1___default","lodash_chunk__WEBPACK_IMPORTED_MODULE_3___default","generateSeries","measuresHistory","metrics","displayedMetrics","lodash_sortBy__WEBPACK_IMPORTED_MODULE_0___default","measure","indexOf","metric","uncoveredLines","linesToCover","history","x","translatedName","sonar_ui_common_helpers_l10n__WEBPACK_IMPORTED_MODULE_4__","generateCoveredLinesMetric","Array","isArray","findMetric","_helpers_measures__WEBPACK_IMPORTED_MODULE_6__","saveActivityGraph","namespace","sonar_ui_common_helpers_storage__WEBPACK_IMPORTED_MODULE_5__","join","getActivityGraph","customGraphs","split","GraphType","second","__rest","_helpers_branch_like__WEBPACK_IMPORTED_MODULE_3__","sonar_ui_common_components_icons_PullRequestIcon__WEBPACK_IMPORTED_MODULE_2___default","sonar_ui_common_components_icons_BranchIcon__WEBPACK_IMPORTED_MODULE_1___default"],"mappings":"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","file":"js/302.1582644816097.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as startOfDay from 'date-fns/start_of_day';\nimport { isEqual } from 'lodash';\nimport { parseDate } from 'sonar-ui-common/helpers/dates';\nimport {\n  cleanQuery,\n  parseAsArray,\n  parseAsDate,\n  parseAsString,\n  serializeDate,\n  serializeString,\n  serializeStringArray\n} from 'sonar-ui-common/helpers/query';\nimport { DEFAULT_GRAPH } from '../../components/activity-graph/utils';\nimport { GraphType } from '../../types/project-activity';\n\nexport interface Query {\n  category: string;\n  customMetrics: string[];\n  from?: Date;\n  graph: GraphType;\n  project: string;\n  selectedDate?: Date;\n  to?: Date;\n}\n\nexport const EVENT_TYPES = ['VERSION', 'QUALITY_GATE', 'QUALITY_PROFILE', 'OTHER'];\nexport const APPLICATION_EVENT_TYPES = ['QUALITY_GATE', 'DEFINITION_CHANGE', 'OTHER'];\n\nexport function activityQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return prevQuery.category !== nextQuery.category || datesQueryChanged(prevQuery, nextQuery);\n}\n\nexport function customMetricsChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.customMetrics, nextQuery.customMetrics);\n}\n\nexport function datesQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.from, nextQuery.from) || !isEqual(prevQuery.to, nextQuery.to);\n}\n\nexport function historyQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return prevQuery.graph !== nextQuery.graph;\n}\n\nexport function selectedDateQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.selectedDate, nextQuery.selectedDate);\n}\n\ninterface AnalysesByDay {\n  byDay: T.Dict<T.ParsedAnalysis[]>;\n  version: string | null;\n  key: string | null;\n}\n\nexport function getAnalysesByVersionByDay(\n  analyses: T.ParsedAnalysis[],\n  query: Pick<Query, 'category' | 'from' | 'to'>\n) {\n  return analyses.reduce<AnalysesByDay[]>((acc, analysis) => {\n    let currentVersion = acc[acc.length - 1];\n    const versionEvent = analysis.events.find(event => event.category === 'VERSION');\n    if (versionEvent) {\n      const newVersion = { version: versionEvent.name, key: versionEvent.key, byDay: {} };\n      if (!currentVersion || Object.keys(currentVersion.byDay).length > 0) {\n        acc.push(newVersion);\n      } else {\n        acc[acc.length - 1] = newVersion;\n      }\n      currentVersion = newVersion;\n    } else if (!currentVersion) {\n      // APPs don't have version events, so let's create a fake one\n      currentVersion = { version: null, key: null, byDay: {} };\n      acc.push(currentVersion);\n    }\n\n    const day = startOfDay(parseDate(analysis.date))\n      .getTime()\n      .toString();\n\n    let matchFilters = true;\n    if (query.category || query.from || query.to) {\n      const isAfterFrom = !query.from || analysis.date >= query.from;\n      const isBeforeTo = !query.to || analysis.date <= query.to;\n      const hasSelectedCategoryEvents =\n        !query.category || analysis.events.find(event => event.category === query.category) != null;\n      matchFilters = isAfterFrom && isBeforeTo && hasSelectedCategoryEvents;\n    }\n\n    if (matchFilters) {\n      if (!currentVersion.byDay[day]) {\n        currentVersion.byDay[day] = [];\n      }\n      currentVersion.byDay[day].push(analysis);\n    }\n    return acc;\n  }, []);\n}\n\nexport function parseQuery(urlQuery: T.RawQuery): Query {\n  return {\n    category: parseAsString(urlQuery['category']),\n    customMetrics: parseAsArray(urlQuery['custom_metrics'], parseAsString),\n    from: parseAsDate(urlQuery['from']),\n    graph: parseGraph(urlQuery['graph']),\n    project: parseAsString(urlQuery['id']),\n    to: parseAsDate(urlQuery['to']),\n    selectedDate: parseAsDate(urlQuery['selected_date'])\n  };\n}\n\nexport function serializeQuery(query: Query): T.RawQuery {\n  return cleanQuery({\n    category: serializeString(query.category),\n    from: serializeDate(query.from),\n    project: serializeString(query.project),\n    to: serializeDate(query.to)\n  });\n}\n\nexport function serializeUrlQuery(query: Query): T.RawQuery {\n  return cleanQuery({\n    category: serializeString(query.category),\n    custom_metrics: serializeStringArray(query.customMetrics),\n    from: serializeDate(query.from),\n    graph: serializeGraph(query.graph),\n    id: serializeString(query.project),\n    to: serializeDate(query.to),\n    selected_date: serializeDate(query.selectedDate)\n  });\n}\n\nfunction parseGraph(value?: string) {\n  const graph = parseAsString(value);\n  return Object.keys(GraphType).includes(graph) ? (graph as GraphType) : DEFAULT_GRAPH;\n}\n\nfunction serializeGraph(value?: GraphType) {\n  return value === DEFAULT_GRAPH ? undefined : value;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { BranchLike } from '../../types/branch-like';\n\ninterface ComponentContextType {\n  branchLike: BranchLike | undefined;\n  component: T.Component | undefined;\n}\n\nexport const ComponentContext = React.createContext<ComponentContextType>({\n  branchLike: undefined,\n  component: undefined\n});\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getProjectActivity(\n  data: {\n    project: string;\n    category?: string;\n    from?: string;\n    p?: number;\n    ps?: number;\n  } & BranchParameters\n): Promise<{ analyses: T.Analysis[]; paging: T.Paging }> {\n  return getJSON('/api/project_analyses/search', data).catch(throwGlobalError);\n}\n\ninterface CreateEventResponse {\n  analysis: string;\n  key: string;\n  name: string;\n  category: string;\n  description?: string;\n}\n\nexport function createEvent(\n  analysis: string,\n  name: string,\n  category?: string,\n  description?: string\n): Promise<CreateEventResponse> {\n  const data: RequestData = { analysis, name };\n  if (category) {\n    data.category = category;\n  }\n  if (description) {\n    data.description = description;\n  }\n  return postJSON('/api/project_analyses/create_event', data).then(r => r.event, throwGlobalError);\n}\n\nexport function deleteEvent(event: string): Promise<void | Response> {\n  return post('/api/project_analyses/delete_event', { event }).catch(throwGlobalError);\n}\n\nexport function changeEvent(\n  event: string,\n  name?: string,\n  description?: string\n): Promise<CreateEventResponse> {\n  const data: RequestData = { event };\n  if (name) {\n    data.name = name;\n  }\n  if (description) {\n    data.description = description;\n  }\n  return postJSON('/api/project_analyses/update_event', data).then(r => r.event, throwGlobalError);\n}\n\nexport function deleteAnalysis(analysis: string): Promise<void | Response> {\n  return post('/api/project_analyses/delete', { analysis }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport DropdownIcon from 'sonar-ui-common/components/icons/DropdownIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { limitComponentName } from 'sonar-ui-common/helpers/path';\nimport { isMainBranch } from '../../../helpers/branch-like';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BranchLike } from '../../../types/branch-like';\n\nexport type DefinitionChangeEvent = T.AnalysisEvent &\n  Required<Pick<T.AnalysisEvent, 'definitionChange'>>;\n\nexport function isDefinitionChangeEvent(event: T.AnalysisEvent): event is DefinitionChangeEvent {\n  return event.category === 'DEFINITION_CHANGE' && event.definitionChange !== undefined;\n}\n\ninterface Props {\n  branchLike: BranchLike | undefined;\n  event: DefinitionChangeEvent;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nexport class DefinitionChangeEventInner extends React.PureComponent<Props, State> {\n  state: State = { expanded: false };\n\n  stopPropagation = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.stopPropagation();\n  };\n\n  toggleProjectsList = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  renderProjectLink = (project: { key: string; name: string }, branch: string | undefined) => (\n    <Link\n      onClick={this.stopPropagation}\n      title={project.name}\n      to={getProjectUrl(project.key, branch)}>\n      {limitComponentName(project.name, 28)}\n    </Link>\n  );\n\n  renderBranch = (branch = translate('branches.main_branch')) => (\n    <span className=\"nowrap\" title={branch}>\n      <BranchIcon className=\"little-spacer-left text-text-top\" />\n      {branch}\n    </span>\n  );\n\n  renderProjectChange(project: {\n    changeType: string;\n    key: string;\n    name: string;\n    branch?: string;\n    newBranch?: string;\n    oldBranch?: string;\n  }) {\n    const mainBranch = !this.props.branchLike || isMainBranch(this.props.branchLike);\n\n    if (project.changeType === 'ADDED') {\n      const message = mainBranch\n        ? 'event.definition_change.added'\n        : 'event.definition_change.branch_added';\n      return (\n        <div className=\"text-ellipsis\">\n          <FormattedMessage\n            defaultMessage={translate(message)}\n            id={message}\n            values={{\n              project: this.renderProjectLink(project, project.branch),\n              branch: this.renderBranch(project.branch)\n            }}\n          />\n        </div>\n      );\n    } else if (project.changeType === 'REMOVED') {\n      const message = mainBranch\n        ? 'event.definition_change.removed'\n        : 'event.definition_change.branch_removed';\n      return (\n        <div className=\"text-ellipsis\">\n          <FormattedMessage\n            defaultMessage={translate(message)}\n            id={message}\n            values={{\n              project: this.renderProjectLink(project, project.branch),\n              branch: this.renderBranch(project.branch)\n            }}\n          />\n        </div>\n      );\n    } else if (project.changeType === 'BRANCH_CHANGED') {\n      return (\n        <FormattedMessage\n          defaultMessage={translate('event.definition_change.branch_replaced')}\n          id=\"event.definition_change.branch_replaced\"\n          values={{\n            project: this.renderProjectLink(project, project.newBranch),\n            oldBranch: this.renderBranch(project.oldBranch),\n            newBranch: this.renderBranch(project.newBranch)\n          }}\n        />\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const { event } = this.props;\n    const { expanded } = this.state;\n    return (\n      <>\n        <span className=\"note\">{translate('event.category', event.category)}:</span>\n\n        <div>\n          <ResetButtonLink\n            className=\"project-activity-event-inner-more-link\"\n            onClick={this.toggleProjectsList}\n            stopPropagation={true}>\n            {expanded ? translate('hide') : translate('more')}\n            <DropdownIcon className=\"little-spacer-left\" turned={expanded} />\n          </ResetButtonLink>\n        </div>\n\n        {expanded && (\n          <ul className=\"spacer-left spacer-top\">\n            {event.definitionChange.projects.map(project => (\n              <li className=\"display-flex-center spacer-top\" key={project.key}>\n                {this.renderProjectChange(project)}\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport DropdownIcon from 'sonar-ui-common/components/icons/DropdownIcon';\nimport Level from 'sonar-ui-common/components/ui/Level';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\n\nexport type RichQualityGateEvent = T.AnalysisEvent & Required<Pick<T.AnalysisEvent, 'qualityGate'>>;\n\nexport function isRichQualityGateEvent(event: T.AnalysisEvent): event is RichQualityGateEvent {\n  return event.category === 'QUALITY_GATE' && event.qualityGate !== undefined;\n}\n\ninterface Props {\n  event: RichQualityGateEvent;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nexport class RichQualityGateEventInner extends React.PureComponent<Props, State> {\n  state: State = { expanded: false };\n\n  stopPropagation = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.stopPropagation();\n  };\n\n  toggleProjectsList = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  render() {\n    const { event } = this.props;\n    const { expanded } = this.state;\n    return (\n      <>\n        <span className=\"note spacer-right\">{translate('event.category', event.category)}:</span>\n        {event.qualityGate.stillFailing ? (\n          <FormattedMessage\n            defaultMessage={translate('event.quality_gate.still_x')}\n            id=\"event.quality_gate.still_x\"\n            values={{ status: <Level level={event.qualityGate.status} small={true} /> }}\n          />\n        ) : (\n          <Level level={event.qualityGate.status} small={true} />\n        )}\n\n        <div>\n          {event.qualityGate.failing.length > 0 && (\n            <ResetButtonLink\n              className=\"project-activity-event-inner-more-link\"\n              onClick={this.toggleProjectsList}\n              stopPropagation={true}>\n              {expanded ? translate('hide') : translate('more')}\n              <DropdownIcon className=\"little-spacer-left\" turned={expanded} />\n            </ResetButtonLink>\n          )}\n        </div>\n\n        {expanded && (\n          <ul className=\"spacer-left spacer-top\">\n            {event.qualityGate.failing.map(project => (\n              <li className=\"display-flex-center spacer-top\" key={project.key}>\n                <Level\n                  aria-label={translate('quality_gates.status')}\n                  className=\"spacer-right\"\n                  level={event.qualityGate.status}\n                  small={true}\n                />\n                <div className=\"flex-1 text-ellipsis\">\n                  <Link\n                    onClick={this.stopPropagation}\n                    title={project.name}\n                    to={getProjectUrl(project.key, project.branch)}>\n                    <span aria-label={translateWithParameters('project_x', project.name)}>\n                      {project.name}\n                    </span>\n                  </Link>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport function getNewCodePeriod(data?: {\n  project?: string;\n  branch?: string;\n}): Promise<T.Omit<T.NewCodePeriod, 'effectiveValue'>> {\n  return getJSON('/api/new_code_periods/show', data).catch(throwGlobalError);\n}\n\nexport function setNewCodePeriod(data: {\n  project?: string;\n  branch?: string;\n  type: T.NewCodePeriodSettingType;\n  value?: string;\n}): Promise<void> {\n  return post('/api/new_code_periods/set', data).catch(throwGlobalError);\n}\n\nexport function resetNewCodePeriod(data: { project?: string; branch?: string }): Promise<void> {\n  return post('/api/new_code_periods/unset', data).catch(throwGlobalError);\n}\n\nexport function listBranchesNewCodePeriod(data: {\n  project: string;\n}): Promise<{ newCodePeriods: T.NewCodePeriodBranch[] }> {\n  return getJSON('/api/new_code_periods/list', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport function validateDays(days: string) {\n  const parsed = parseInt(days, 10);\n\n  return !(days.length < 1 || isNaN(parsed) || parsed < 1 || String(parsed) !== days);\n}\n\nexport function getSettingValue({\n  analysis,\n  days,\n  type\n}: {\n  analysis?: string;\n  days?: string;\n  type?: T.NewCodePeriodSettingType;\n}) {\n  switch (type) {\n    case 'NUMBER_OF_DAYS':\n      return days;\n    case 'SPECIFIC_ANALYSIS':\n      return analysis;\n    default:\n      return undefined;\n  }\n}\n\nexport function validateSetting(state: {\n  analysis?: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  selected?: T.NewCodePeriodSettingType;\n  overrideGeneralSetting?: boolean;\n}) {\n  const {\n    analysis = '',\n    currentSetting,\n    currentSettingValue,\n    days,\n    selected,\n    overrideGeneralSetting\n  } = state;\n\n  let isChanged;\n  if (!currentSetting && overrideGeneralSetting !== undefined) {\n    isChanged = overrideGeneralSetting;\n  } else {\n    isChanged =\n      overrideGeneralSetting === false ||\n      selected !== currentSetting ||\n      (selected === 'NUMBER_OF_DAYS' && days !== currentSettingValue) ||\n      (selected === 'SPECIFIC_ANALYSIS' && analysis !== currentSettingValue);\n  }\n\n  const isValid =\n    overrideGeneralSetting === false ||\n    selected === 'PREVIOUS_VERSION' ||\n    (selected === 'SPECIFIC_ANALYSIS' && analysis.length > 0) ||\n    (selected === 'NUMBER_OF_DAYS' && validateDays(days));\n\n  return { isChanged, isValid };\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  className?: string;\n  days: string;\n  disabled?: boolean;\n  isChanged: boolean;\n  isValid: boolean;\n  onChangeDays: (value: string) => void;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingDays(props: Props) {\n  const { className, days, disabled, isChanged, isValid, onChangeDays, onSelect, selected } = props;\n  return (\n    <RadioCard\n      className={className}\n      disabled={disabled}\n      onClick={() => onSelect('NUMBER_OF_DAYS')}\n      selected={selected}\n      title={translate('baseline.number_days')}>\n      <>\n        <p className=\"big-spacer-bottom\">{translate('baseline.number_days.description')}</p>\n        {selected && (\n          <ValidationInput\n            error={undefined}\n            id=\"baseline_number_of_days\"\n            isInvalid={isChanged && !isValid}\n            isValid={isChanged && isValid}\n            label={translate('baseline.specify_days')}\n            required={true}>\n            <input onChange={e => onChangeDays(e.currentTarget.value)} type=\"text\" value={days} />\n          </ValidationInput>\n        )}\n      </>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  disabled?: boolean;\n  isDefault?: boolean;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingPreviousVersion(props: Props) {\n  const { disabled, isDefault, onSelect, selected } = props;\n  return (\n    <RadioCard\n      disabled={disabled}\n      onClick={() => onSelect('PREVIOUS_VERSION')}\n      selected={selected}\n      title={\n        translate('baseline.previous_version') + (isDefault ? ` (${translate('default')})` : '')\n      }>\n      <p>{translate('baseline.previous_version.description')}</p>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ComponentContext } from '../../../app/components/ComponentContext';\nimport { DefinitionChangeEventInner, isDefinitionChangeEvent } from './DefinitionChangeEventInner';\nimport { isRichQualityGateEvent, RichQualityGateEventInner } from './RichQualityGateEventInner';\n\nexport interface EventInnerProps {\n  event: T.AnalysisEvent;\n}\n\nexport default function EventInner({ event }: EventInnerProps) {\n  if (isRichQualityGateEvent(event)) {\n    return <RichQualityGateEventInner event={event} />;\n  } else if (isDefinitionChangeEvent(event)) {\n    return (\n      <ComponentContext.Consumer>\n        {({ branchLike }) => <DefinitionChangeEventInner branchLike={branchLike} event={event} />}\n      </ComponentContext.Consumer>\n    );\n  } else {\n    const content = (\n      <span className=\"text-middle\">\n        <span className=\"note little-spacer-right\">\n          {translate('event.category', event.category)}:\n        </span>\n        <strong className=\"spacer-right\">{event.name}</strong>\n      </span>\n    );\n    return event.description ? <Tooltip overlay={event.description}>{content}</Tooltip> : content;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  changeEvent: (event: string, name: string) => Promise<void>;\n  event: T.AnalysisEvent;\n  header: string;\n  onClose: () => void;\n}\n\ninterface State {\n  name: string;\n}\n\nexport default class ChangeEventForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.event.name };\n  }\n\n  changeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value });\n  };\n\n  handleSubmit = () => {\n    return this.props.changeEvent(this.props.event.key, this.state.name);\n  };\n\n  render() {\n    const { name } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('change_verb')}\n        confirmDisable={!name || name === this.props.event.name}\n        header={this.props.header}\n        onClose={this.props.onClose}\n        onConfirm={this.handleSubmit}\n        size=\"small\">\n        <div className=\"modal-field\">\n          <label>{translate('name')}</label>\n          <input autoFocus={true} onChange={this.changeInput} type=\"text\" value={name} />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface RemoveEventFormProps {\n  analysisKey: string;\n  event: T.AnalysisEvent;\n  header: string;\n  removeEventQuestion: string;\n  onClose: () => void;\n  onConfirm: (analysis: string, event: string) => Promise<void>;\n}\n\nexport default function RemoveEventForm(props: RemoveEventFormProps) {\n  const { analysisKey, event, header, removeEventQuestion } = props;\n  return (\n    <ConfirmModal\n      confirmButtonText={translate('delete')}\n      header={header}\n      isDestructive={true}\n      onClose={props.onClose}\n      onConfirm={() => props.onConfirm(analysisKey, event.key)}>\n      {removeEventQuestion}\n    </ConfirmModal>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { DeleteButton, EditButton } from 'sonar-ui-common/components/controls/buttons';\nimport ProjectEventIcon from 'sonar-ui-common/components/icons/ProjectEventIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport EventInner from './EventInner';\nimport ChangeEventForm from './forms/ChangeEventForm';\nimport RemoveEventForm from './forms/RemoveEventForm';\n\nexport interface EventProps {\n  analysisKey: string;\n  canAdmin?: boolean;\n  event: T.AnalysisEvent;\n  isFirst?: boolean;\n  onChange?: (event: string, name: string) => Promise<void>;\n  onDelete?: (analysisKey: string, event: string) => Promise<void>;\n}\n\nexport function Event(props: EventProps) {\n  const { analysisKey, event, canAdmin, isFirst } = props;\n\n  const [changing, setChanging] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n\n  const isOther = event.category === 'OTHER';\n  const isVersion = event.category === 'VERSION';\n  const canChange = (isOther || isVersion) && props.onChange;\n  const canDelete = (isOther || (isVersion && !isFirst)) && props.onDelete;\n  const showActions = canAdmin && (canChange || canDelete);\n\n  return (\n    <div className=\"project-activity-event\">\n      <ProjectEventIcon\n        className={classNames(\n          'project-activity-event-icon little-spacer-right text-middle',\n          event.category\n        )}\n      />\n\n      <EventInner event={event} />\n\n      {showActions && (\n        <span className=\"nowrap\">\n          {canChange && (\n            <EditButton\n              aria-label={translate('project_activity.events.tooltip.edit')}\n              className=\"button-small\"\n              data-test=\"project-activity__edit-event\"\n              onClick={() => setChanging(true)}\n              stopPropagation={true}\n            />\n          )}\n          {canDelete && (\n            <DeleteButton\n              aria-label={translate('project_activity.events.tooltip.delete')}\n              className=\"button-small\"\n              data-test=\"project-activity__delete-event\"\n              onClick={() => setDeleting(true)}\n              stopPropagation={true}\n            />\n          )}\n        </span>\n      )}\n\n      {changing && props.onChange && (\n        <ChangeEventForm\n          changeEvent={props.onChange}\n          event={event}\n          header={\n            isVersion\n              ? translate('project_activity.change_version')\n              : translate('project_activity.change_custom_event')\n          }\n          onClose={() => setChanging(false)}\n        />\n      )}\n\n      {deleting && props.onDelete && (\n        <RemoveEventForm\n          analysisKey={analysisKey}\n          event={event}\n          header={\n            isVersion\n              ? translate('project_activity.remove_version')\n              : translate('project_activity.remove_custom_event')\n          }\n          onClose={() => setDeleting(false)}\n          onConfirm={props.onDelete}\n          removeEventQuestion={translate(\n            `project_activity.${isVersion ? 'remove_version' : 'remove_custom_event'}.question`\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(Event);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport Event from './Event';\n\nexport interface EventsProps {\n  analysisKey: string;\n  canAdmin?: boolean;\n  events: T.AnalysisEvent[];\n  isFirst?: boolean;\n  onChange?: (event: string, name: string) => Promise<void>;\n  onDelete?: (analysis: string, event: string) => Promise<void>;\n}\n\nexport function Events(props: EventsProps) {\n  const { analysisKey, canAdmin, events, isFirst } = props;\n\n  const sortedEvents = sortBy(\n    events,\n    // versions last\n    event => (event.category === 'VERSION' ? 1 : 0),\n    // then the rest sorted by category\n    'category'\n  );\n\n  return (\n    <div className=\"big-spacer-top\">\n      {sortedEvents.map(event => (\n        <Event\n          analysisKey={analysisKey}\n          canAdmin={canAdmin}\n          event={event}\n          isFirst={isFirst}\n          key={event.key}\n          onChange={props.onChange}\n          onDelete={props.onDelete}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(Events);\n","\nvar content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".project-baseline{padding:32px}.project-baseline-selector>.branch-baseline-setting-modal{max-height:60vh;padding-top:2px}.project-baseline-selector .general-setting{margin-left:7px}.branch-baseline-selector>hr{margin:0 -32px 32px}.branch-analysis-list-wrapper,.branch-baseline-setting-modal{display:flex;flex-direction:column}.branch-analysis-list-wrapper{overflow:hidden;position:relative;min-height:200px}.branch-analysis-list{overflow-y:auto;padding-left:12px;padding-right:15px;min-height:50px}.branch-analysis-list>ul{padding-top:18px}.branch-analysis-date{margin-bottom:16px;font-size:15px;font-weight:700}.branch-analysis-day{margin-top:8px;margin-bottom:24px}.branch-analysis{display:flex;justify-content:space-between;cursor:pointer;padding:8px;border-top:1px solid #e6e6e6;border-bottom:1px solid #e6e6e6}.branch-analysis+.branch-analysis{border-top:none}.branch-analysis:hover{background-color:#cae3f2}.branch-analysis>.project-activity-events{flex:1 0 50%}.branch-analysis-time{width:150px}.branch-analysis-version-badge{margin-left:-12px;padding-top:8px;padding-bottom:8px;background-color:#fff}.branch-analysis-version-badge.sticky+.branch-analysis-days-list{padding-top:36px}.branch-analysis-version-badge.first,.branch-analysis-version-badge.sticky{position:absolute;top:1px;left:13px;right:16px;padding-top:24px;z-index:1}.branch-analysis-version-badge .badge{max-width:385px;border-radius:0 2px 2px 0;font-weight:700;font-size:12px;letter-spacing:0;overflow:hidden;text-overflow:ellipsis}.project-activity-event-icon.VERSION{color:#4b9fd5}.project-activity-event-icon.QUALITY_GATE{color:#9139d4}.project-activity-event-icon.QUALITY_PROFILE{color:#ccc}.project-activity-event-icon.DEFINITION_CHANGE{color:#33a759}.project-activity-event-icon.OTHER{color:#442d1b}.invisible{visibility:hidden}\", \"\"]);\n\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  disabled?: boolean;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingAnalysis({ disabled, onSelect, selected }: Props) {\n  return (\n    <RadioCard\n      disabled={disabled}\n      onClick={() => onSelect('SPECIFIC_ANALYSIS')}\n      selected={selected}\n      title={translate('baseline.specific_analysis')}>\n      <p className=\"big-spacer-bottom\">{translate('baseline.specific_analysis.description')}</p>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { subDays } from 'date-fns';\nimport { throttle } from 'lodash';\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { parseDate, toShortNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { scrollToElement } from 'sonar-ui-common/helpers/scrolling';\nimport { getProjectActivity } from '../../../api/projectActivity';\nimport DateFormatter from '../../../components/intl/DateFormatter';\nimport TimeFormatter from '../../../components/intl/TimeFormatter';\nimport Events from '../../projectActivity/components/Events';\nimport { getAnalysesByVersionByDay } from '../../projectActivity/utils';\n\ninterface Props {\n  analysis: string;\n  branch: string;\n  component: string;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n}\n\ninterface State {\n  analyses: T.ParsedAnalysis[];\n  loading: boolean;\n  range: number;\n  scroll: number;\n}\n\nexport default class BranchAnalysisList extends React.PureComponent<Props, State> {\n  mounted = false;\n  badges: T.Dict<HTMLDivElement> = {};\n  rootNodeRef: React.RefObject<HTMLDivElement>;\n  state: State = {\n    analyses: [],\n    loading: true,\n    range: 30,\n    scroll: 0\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.rootNodeRef = React.createRef<HTMLDivElement>();\n    this.updateScroll = throttle(this.updateScroll, 20);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchAnalyses(true);\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  scrollToSelected() {\n    const selectedNode = document.querySelector('.branch-analysis.selected');\n    if (this.rootNodeRef.current && selectedNode) {\n      scrollToElement(selectedNode, { parent: this.rootNodeRef.current, bottomOffset: 40 });\n    }\n  }\n\n  fetchAnalyses(initial = false) {\n    const { analysis, branch, component } = this.props;\n    const { range } = this.state;\n    this.setState({ loading: true });\n\n    return getProjectActivity({\n      branch,\n      project: component,\n      from: range ? toShortNotSoISOString(subDays(new Date(), range)) : undefined\n    }).then((result: { analyses: T.Analysis[] }) => {\n      // If the selected analysis wasn't found in the default 30 days range, redo the search\n      if (initial && analysis && !result.analyses.find(a => a.key === analysis)) {\n        this.handleRangeChange({ value: 0 });\n        return;\n      }\n\n      this.setState(\n        {\n          analyses: result.analyses.map(analysis => ({\n            ...analysis,\n            date: parseDate(analysis.date)\n          })) as T.ParsedAnalysis[],\n          loading: false\n        },\n        () => {\n          this.scrollToSelected();\n        }\n      );\n    });\n  }\n\n  handleScroll = (e: React.SyntheticEvent<HTMLDivElement>) => {\n    if (e.currentTarget) {\n      this.updateScroll(e.currentTarget.scrollTop);\n    }\n  };\n\n  updateScroll = (scroll: number) => {\n    this.setState({ scroll });\n  };\n\n  registerBadgeNode = (version: string) => (el: HTMLDivElement) => {\n    if (el) {\n      if (!el.getAttribute('originOffsetTop')) {\n        el.setAttribute('originOffsetTop', String(el.offsetTop));\n      }\n      this.badges[version] = el;\n    }\n  };\n\n  shouldStick = (version: string) => {\n    const badge = this.badges[version];\n    return badge && Number(badge.getAttribute('originOffsetTop')) < this.state.scroll + 10;\n  };\n\n  getRangeOptions() {\n    return [\n      {\n        label: translate('baseline.branch_analyses.ranges.30days'),\n        value: 30\n      },\n      {\n        label: translate('baseline.branch_analyses.ranges.allTime'),\n        value: 0\n      }\n    ];\n  }\n\n  handleRangeChange = ({ value }: { value: number }) => {\n    this.setState({ range: value }, () => this.fetchAnalyses());\n  };\n\n  render() {\n    const { analyses, loading, range } = this.state;\n\n    const byVersionByDay = getAnalysesByVersionByDay(analyses, {\n      category: ''\n    });\n\n    const hasFilteredData =\n      byVersionByDay.length > 1 ||\n      (byVersionByDay.length === 1 && Object.keys(byVersionByDay[0].byDay).length > 0);\n\n    return (\n      <>\n        <div className=\"spacer-bottom\">\n          {translate('baseline.analysis_from')}\n          <Select\n            autoBlur={true}\n            className=\"input-medium spacer-left\"\n            clearable={false}\n            onChange={this.handleRangeChange}\n            options={this.getRangeOptions()}\n            searchable={false}\n            value={range}\n          />\n        </div>\n        <div className=\"branch-analysis-list-wrapper\">\n          <div\n            className=\"bordered branch-analysis-list\"\n            onScroll={this.handleScroll}\n            ref={this.rootNodeRef}>\n            {loading && <DeferredSpinner className=\"big-spacer-top\" />}\n\n            {!loading && !hasFilteredData ? (\n              <div className=\"big-spacer-top big-spacer-bottom strong\">\n                {translate('baseline.no_analyses')}\n              </div>\n            ) : (\n              <ul>\n                {byVersionByDay.map((version, idx) => {\n                  const days = Object.keys(version.byDay);\n                  if (days.length <= 0) {\n                    return null;\n                  }\n                  return (\n                    <li key={version.key || 'noversion'}>\n                      {version.version && (\n                        <div\n                          className={classNames('branch-analysis-version-badge', {\n                            first: idx === 0,\n                            sticky: this.shouldStick(version.version)\n                          })}\n                          ref={this.registerBadgeNode(version.version)}>\n                          <Tooltip\n                            mouseEnterDelay={0.5}\n                            overlay={`${translate('version')} ${version.version}`}>\n                            <span className=\"badge\">{version.version}</span>\n                          </Tooltip>\n                        </div>\n                      )}\n                      <ul className=\"branch-analysis-days-list\">\n                        {days.map(day => (\n                          <li\n                            className=\"branch-analysis-day\"\n                            data-day={toShortNotSoISOString(Number(day))}\n                            key={day}>\n                            <div className=\"branch-analysis-date\">\n                              <DateFormatter date={Number(day)} long={true} />\n                            </div>\n                            <ul className=\"branch-analysis-analyses-list\">\n                              {version.byDay[day] != null &&\n                                version.byDay[day].map(analysis => (\n                                  <li\n                                    className={classNames('branch-analysis', {\n                                      selected: analysis.key === this.props.analysis\n                                    })}\n                                    data-date={parseDate(analysis.date).valueOf()}\n                                    key={analysis.key}\n                                    onClick={() => this.props.onSelectAnalysis(analysis)}>\n                                    <div className=\"branch-analysis-time spacer-right\">\n                                      <TimeFormatter date={parseDate(analysis.date)} long={false}>\n                                        {formattedTime => (\n                                          <time\n                                            className=\"text-middle\"\n                                            dateTime={parseDate(analysis.date).toISOString()}>\n                                            {formattedTime}\n                                          </time>\n                                        )}\n                                      </TimeFormatter>\n                                    </div>\n\n                                    {analysis.events.length > 0 && (\n                                      <Events\n                                        analysisKey={analysis.key}\n                                        events={analysis.events}\n                                        isFirst={analyses[0].key === analysis.key}\n                                      />\n                                    )}\n\n                                    <div className=\"analysis-selection-button\">\n                                      <i\n                                        className={classNames('icon-radio', {\n                                          'is-checked': analysis.key === this.props.analysis\n                                        })}\n                                      />\n                                    </div>\n                                  </li>\n                                ))}\n                            </ul>\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  );\n                })}\n              </ul>\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { toNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { setNewCodePeriod } from '../../../api/newCodePeriod';\nimport { BranchWithNewCodePeriod } from '../../../types/branch-like';\nimport { getSettingValue, validateSetting } from '../utils';\nimport BaselineSettingAnalysis from './BaselineSettingAnalysis';\nimport BaselineSettingDays from './BaselineSettingDays';\nimport BaselineSettingPreviousVersion from './BaselineSettingPreviousVersion';\nimport BranchAnalysisList from './BranchAnalysisList';\n\ninterface Props {\n  branch: BranchWithNewCodePeriod;\n  component: string;\n  onClose: (branch?: string, newSetting?: T.NewCodePeriod) => void;\n}\n\ninterface State {\n  analysis: string;\n  analysisDate?: Date;\n  days: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n}\n\nexport default class BranchBaselineSettingModal extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      analysis: this.getValueFromProps('SPECIFIC_ANALYSIS') || '',\n      days: this.getValueFromProps('NUMBER_OF_DAYS') || '30',\n      saving: false,\n      selected: this.props.branch.newCodePeriod && this.props.branch.newCodePeriod.type\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getValueFromProps(type: T.NewCodePeriodSettingType) {\n    return this.props.branch.newCodePeriod && this.props.branch.newCodePeriod.type === type\n      ? this.props.branch.newCodePeriod.value\n      : null;\n  }\n\n  handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { branch, component } = this.props;\n    const { analysis, analysisDate, days, selected: type } = this.state;\n\n    const value = getSettingValue({ type, analysis, days });\n\n    if (type) {\n      this.setState({ saving: true });\n      setNewCodePeriod({\n        project: component,\n        type,\n        value,\n        branch: branch.name\n      }).then(\n        () => {\n          this.setState({\n            saving: false\n          });\n          this.props.onClose(branch.name, {\n            type,\n            value,\n            effectiveValue: analysisDate && toNotSoISOString(analysisDate)\n          });\n        },\n        () => {\n          this.setState({\n            saving: false\n          });\n        }\n      );\n    }\n  };\n\n  requestClose = () => this.props.onClose();\n\n  handleSelectAnalysis = (analysis: T.ParsedAnalysis) =>\n    this.setState({ analysis: analysis.key, analysisDate: analysis.date });\n\n  handleSelectDays = (days: string) => this.setState({ days });\n\n  handleSelectSetting = (selected: T.NewCodePeriodSettingType) => this.setState({ selected });\n\n  render() {\n    const { branch } = this.props;\n    const { analysis, days, saving, selected } = this.state;\n\n    const header = translateWithParameters('baseline.new_code_period_for_branch_x', branch.name);\n\n    const currentSetting = branch.newCodePeriod && branch.newCodePeriod.type;\n    const currentSettingValue = branch.newCodePeriod && branch.newCodePeriod.value;\n\n    const { isChanged, isValid } = validateSetting({\n      analysis,\n      currentSetting,\n      currentSettingValue,\n      days,\n      selected\n    });\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.requestClose} size=\"large\">\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body modal-container branch-baseline-setting-modal\">\n            <div className=\"display-flex-row huge-spacer-bottom\" role=\"radiogroup\">\n              <BaselineSettingPreviousVersion\n                isDefault={false}\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'PREVIOUS_VERSION'}\n              />\n              <BaselineSettingDays\n                days={days}\n                isChanged={isChanged}\n                isValid={isValid}\n                onChangeDays={this.handleSelectDays}\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'NUMBER_OF_DAYS'}\n              />\n              <BaselineSettingAnalysis\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'SPECIFIC_ANALYSIS'}\n              />\n            </div>\n            {selected === 'SPECIFIC_ANALYSIS' && (\n              <BranchAnalysisList\n                analysis={analysis}\n                branch={branch.name}\n                component={this.props.component}\n                onSelectAnalysis={this.handleSelectAnalysis}\n              />\n            )}\n          </div>\n          <footer className=\"modal-foot\">\n            <DeferredSpinner className=\"spacer-right\" loading={saving} />\n            <SubmitButton disabled={!isChanged || saving || !isValid}>\n              {translate('save')}\n            </SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { listBranchesNewCodePeriod, resetNewCodePeriod } from '../../../api/newCodePeriod';\nimport BranchLikeIcon from '../../../components/icons/BranchLikeIcon';\nimport DateTimeFormatter from '../../../components/intl/DateTimeFormatter';\nimport { isBranch, sortBranches } from '../../../helpers/branch-like';\nimport { BranchLike, BranchWithNewCodePeriod } from '../../../types/branch-like';\nimport BranchBaselineSettingModal from './BranchBaselineSettingModal';\n\ninterface Props {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  inheritedSetting: T.NewCodePeriod;\n}\n\ninterface State {\n  branches: BranchWithNewCodePeriod[];\n  editedBranch?: BranchWithNewCodePeriod;\n  loading: boolean;\n}\n\nexport default class BranchList extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    branches: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranches();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  sortAndFilterBranches(branchLikes: BranchLike[] = []) {\n    return sortBranches(branchLikes.filter(isBranch));\n  }\n\n  fetchBranches() {\n    const project = this.props.component.key;\n    this.setState({ loading: true });\n\n    const sortedBranches = this.sortAndFilterBranches(this.props.branchLikes);\n\n    listBranchesNewCodePeriod({ project }).then(\n      branchSettings => {\n        const newCodePeriods = branchSettings.newCodePeriods\n          ? branchSettings.newCodePeriods.filter(ncp => !ncp.inherited)\n          : [];\n\n        const branchesWithBaseline = sortedBranches.map(b => {\n          const newCodePeriod = newCodePeriods.find(ncp => ncp.branchKey === b.name);\n          if (!newCodePeriod) {\n            return b;\n          }\n          const { type = 'PREVIOUS_VERSION', value, effectiveValue } = newCodePeriod;\n          return {\n            ...b,\n            newCodePeriod: { type, value, effectiveValue }\n          };\n        });\n\n        this.setState({ branches: branchesWithBaseline, loading: false });\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  updateBranchNewCodePeriod = (branch: string, newSetting: T.NewCodePeriod | undefined) => {\n    const { branches } = this.state;\n\n    const updated = branches.find(b => b.name === branch);\n    if (updated) {\n      updated.newCodePeriod = newSetting;\n    }\n    return branches.slice(0);\n  };\n\n  openEditModal = (branch: BranchWithNewCodePeriod) => {\n    this.setState({ editedBranch: branch });\n  };\n\n  closeEditModal = (branch?: string, newSetting?: T.NewCodePeriod) => {\n    if (branch) {\n      this.setState({\n        branches: this.updateBranchNewCodePeriod(branch, newSetting),\n        editedBranch: undefined\n      });\n    } else {\n      this.setState({ editedBranch: undefined });\n    }\n  };\n\n  resetToDefault(branch: string) {\n    return resetNewCodePeriod({\n      project: this.props.component.key,\n      branch\n    }).then(() => {\n      this.setState({ branches: this.updateBranchNewCodePeriod(branch, undefined) });\n    });\n  }\n\n  renderNewCodePeriodSetting(newCodePeriod: T.NewCodePeriod) {\n    switch (newCodePeriod.type) {\n      case 'SPECIFIC_ANALYSIS':\n        return (\n          <>\n            {`${translate('baseline.specific_analysis')}: `}\n            {newCodePeriod.effectiveValue ? (\n              <DateTimeFormatter date={newCodePeriod.effectiveValue} />\n            ) : (\n              '?'\n            )}\n          </>\n        );\n      case 'NUMBER_OF_DAYS':\n        return `${translate('baseline.number_days')}: ${newCodePeriod.value}`;\n      case 'PREVIOUS_VERSION':\n        return translate('baseline.previous_version');\n      default:\n        return newCodePeriod.type;\n    }\n  }\n\n  render() {\n    const { branches, editedBranch, loading } = this.state;\n\n    if (branches.length < 1) {\n      return null;\n    }\n\n    if (loading) {\n      return <DeferredSpinner />;\n    }\n\n    return (\n      <>\n        <table className=\"data zebra\">\n          <thead>\n            <tr>\n              <th>{translate('branch_list.branch')}</th>\n              <th className=\"nowrap huge-spacer-right\">\n                {translate('branch_list.current_setting')}\n              </th>\n              <th className=\"thin nowrap\">{translate('branch_list.actions')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {branches.map(branch => (\n              <tr key={branch.name}>\n                <td className=\"nowrap\">\n                  <BranchLikeIcon branchLike={branch} className=\"little-spacer-right\" />\n                  {branch.name}\n                  {branch.isMain && (\n                    <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n                  )}\n                </td>\n                <td className=\"huge-spacer-right nowrap\">\n                  {branch.newCodePeriod\n                    ? this.renderNewCodePeriodSetting(branch.newCodePeriod)\n                    : translate('branch_list.default_setting')}\n                </td>\n                <td className=\"text-right\">\n                  <ActionsDropdown>\n                    <ActionsDropdownItem onClick={() => this.openEditModal(branch)}>\n                      {translate('edit')}\n                    </ActionsDropdownItem>\n                    {branch.newCodePeriod && (\n                      <ActionsDropdownItem onClick={() => this.resetToDefault(branch.name)}>\n                        {translate('reset_to_default')}\n                      </ActionsDropdownItem>\n                    )}\n                  </ActionsDropdown>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {editedBranch && (\n          <BranchBaselineSettingModal\n            branch={editedBranch}\n            component={this.props.component.key}\n            onClose={this.closeEditModal}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { validateSetting } from '../utils';\nimport BaselineSettingAnalysis from './BaselineSettingAnalysis';\nimport BaselineSettingDays from './BaselineSettingDays';\nimport BaselineSettingPreviousVersion from './BaselineSettingPreviousVersion';\nimport BranchAnalysisList from './BranchAnalysisList';\n\nexport interface ProjectBaselineSelectorProps {\n  analysis?: string;\n  branchesEnabled?: boolean;\n  component: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  generalSetting: T.NewCodePeriod;\n  onCancel: () => void;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  onSelectDays: (value: string) => void;\n  onSelectSetting: (value?: T.NewCodePeriodSettingType) => void;\n  onSubmit: (e: React.SyntheticEvent<HTMLFormElement>) => void;\n  onToggleSpecificSetting: (selection: boolean) => void;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n  overrideGeneralSetting: boolean;\n}\n\nfunction renderGeneralSetting(generalSetting: T.NewCodePeriod) {\n  let setting: string;\n  let description: string;\n  if (generalSetting.type === 'NUMBER_OF_DAYS') {\n    setting = `${translate('baseline.number_days')} (${translateWithParameters(\n      'duration.days',\n      generalSetting.value || '?'\n    )})`;\n    description = translate('baseline.number_days.description');\n  } else {\n    setting = translate('baseline.previous_version');\n    description = translate('baseline.previous_version.description');\n  }\n\n  return (\n    <div className=\"general-setting\">\n      <strong>{setting}</strong>: {description}\n    </div>\n  );\n}\n\nexport default function ProjectBaselineSelector(props: ProjectBaselineSelectorProps) {\n  const {\n    analysis,\n    branchesEnabled,\n    component,\n    currentSetting,\n    currentSettingValue,\n    days,\n    generalSetting,\n    saving,\n    selected,\n    overrideGeneralSetting\n  } = props;\n\n  const { isChanged, isValid } = validateSetting({\n    analysis,\n    currentSetting,\n    currentSettingValue,\n    days,\n    selected,\n    overrideGeneralSetting\n  });\n\n  return (\n    <form className=\"project-baseline-selector\" onSubmit={props.onSubmit}>\n      <div className=\"big-spacer-top spacer-bottom\" role=\"radiogroup\">\n        <Radio\n          checked={!overrideGeneralSetting}\n          className=\"big-spacer-bottom\"\n          onCheck={() => props.onToggleSpecificSetting(false)}\n          value=\"general\">\n          {translate('project_baseline.general_setting')}\n        </Radio>\n        <div className=\"big-spacer-left\">{renderGeneralSetting(generalSetting)}</div>\n\n        <Radio\n          checked={overrideGeneralSetting}\n          className=\"huge-spacer-top\"\n          onCheck={() => props.onToggleSpecificSetting(true)}\n          value=\"specific\">\n          {translate('project_baseline.specific_setting')}\n        </Radio>\n      </div>\n\n      <div className=\"big-spacer-left big-spacer-right branch-baseline-setting-modal\">\n        <div className=\"display-flex-row big-spacer-bottom\" role=\"radiogroup\">\n          <BaselineSettingPreviousVersion\n            disabled={!overrideGeneralSetting}\n            onSelect={props.onSelectSetting}\n            selected={overrideGeneralSetting && selected === 'PREVIOUS_VERSION'}\n          />\n          <BaselineSettingDays\n            days={days}\n            disabled={!overrideGeneralSetting}\n            isChanged={isChanged}\n            isValid={isValid}\n            onChangeDays={props.onSelectDays}\n            onSelect={props.onSelectSetting}\n            selected={overrideGeneralSetting && selected === 'NUMBER_OF_DAYS'}\n          />\n          {!branchesEnabled && (\n            <BaselineSettingAnalysis\n              disabled={!overrideGeneralSetting}\n              onSelect={props.onSelectSetting}\n              selected={overrideGeneralSetting && selected === 'SPECIFIC_ANALYSIS'}\n            />\n          )}\n        </div>\n        {selected === 'SPECIFIC_ANALYSIS' && (\n          <BranchAnalysisList\n            analysis={analysis || ''}\n            branch=\"master\"\n            component={component}\n            onSelectAnalysis={props.onSelectAnalysis}\n          />\n        )}\n      </div>\n      <div className={classNames('big-spacer-top', { invisible: !isChanged })}>\n        <p className=\"spacer-bottom\">{translate('baseline.next_analysis_notice')}</p>\n        <DeferredSpinner className=\"spacer-right\" loading={saving} />\n        <SubmitButton disabled={saving || !isValid || !isChanged}>{translate('save')}</SubmitButton>\n        <ResetButtonLink className=\"spacer-left\" onClick={props.onCancel}>\n          {translate('cancel')}\n        </ResetButtonLink>\n      </div>\n    </form>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport AlertSuccessIcon from 'sonar-ui-common/components/icons/AlertSuccessIcon';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getNewCodePeriod, resetNewCodePeriod, setNewCodePeriod } from '../../../api/newCodePeriod';\nimport Suggestions from '../../../app/components/embed-docs-modal/Suggestions';\nimport { BranchLike } from '../../../types/branch-like';\nimport '../styles.css';\nimport { getSettingValue } from '../utils';\nimport BranchList from './BranchList';\nimport ProjectBaselineSelector from './ProjectBaselineSelector';\n\ninterface Props {\n  branchLikes: BranchLike[];\n  branchesEnabled?: boolean;\n  canAdmin?: boolean;\n  component: T.Component;\n}\n\ninterface State {\n  analysis?: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  generalSetting?: T.NewCodePeriod;\n  loading: boolean;\n  overrideGeneralSetting?: boolean;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n  success?: boolean;\n}\n\nconst DEFAULT_GENERAL_SETTING: { type: T.NewCodePeriodSettingType } = {\n  type: 'PREVIOUS_VERSION'\n};\n\nexport default class App extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    days: '30',\n    loading: true,\n    saving: false\n  };\n\n  // We use debounce as we could have multiple save in less that 3sec.\n  resetSuccess = debounce(() => this.setState({ success: undefined }), 3000);\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchLeakPeriodSetting();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getUpdatedState(params: {\n    currentSetting?: T.NewCodePeriodSettingType;\n    currentSettingValue?: string;\n    generalSetting: T.NewCodePeriod;\n  }) {\n    const { currentSetting, currentSettingValue, generalSetting } = params;\n\n    const defaultDays =\n      (!currentSetting && generalSetting.type === 'NUMBER_OF_DAYS' && generalSetting.value) || '30';\n\n    return {\n      loading: false,\n      currentSetting,\n      currentSettingValue,\n      generalSetting,\n      selected: currentSetting || generalSetting.type,\n      overrideGeneralSetting: Boolean(currentSetting),\n      days: (currentSetting === 'NUMBER_OF_DAYS' && currentSettingValue) || defaultDays,\n      analysis: (currentSetting === 'SPECIFIC_ANALYSIS' && currentSettingValue) || ''\n    };\n  }\n\n  fetchLeakPeriodSetting() {\n    this.setState({ loading: true });\n\n    Promise.all([\n      getNewCodePeriod(),\n      getNewCodePeriod({\n        branch: !this.props.branchesEnabled ? 'master' : undefined,\n        project: this.props.component.key\n      })\n    ]).then(\n      ([generalSetting, setting]) => {\n        if (this.mounted) {\n          if (!generalSetting.type) {\n            generalSetting = DEFAULT_GENERAL_SETTING;\n          }\n          const currentSettingValue = setting.value;\n          const currentSetting = setting.inherited ? undefined : setting.type || 'PREVIOUS_VERSION';\n\n          this.setState(\n            this.getUpdatedState({ generalSetting, currentSetting, currentSettingValue })\n          );\n        }\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  resetSetting = () => {\n    this.setState({ saving: true });\n    resetNewCodePeriod({ project: this.props.component.key }).then(\n      () => {\n        this.setState({\n          saving: false,\n          currentSetting: undefined,\n          selected: undefined,\n          success: true\n        });\n        this.resetSuccess();\n      },\n      () => {\n        this.setState({ saving: false });\n      }\n    );\n  };\n\n  handleSelectAnalysis = (analysis: T.ParsedAnalysis) => this.setState({ analysis: analysis.key });\n\n  handleSelectDays = (days: string) => this.setState({ days });\n\n  handleCancel = () =>\n    this.setState(\n      ({ generalSetting = DEFAULT_GENERAL_SETTING, currentSetting, currentSettingValue }) =>\n        this.getUpdatedState({ generalSetting, currentSetting, currentSettingValue })\n    );\n\n  handleSelectSetting = (selected?: T.NewCodePeriodSettingType) => this.setState({ selected });\n\n  handleToggleSpecificSetting = (overrideGeneralSetting: boolean) =>\n    this.setState({ overrideGeneralSetting });\n\n  handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { component } = this.props;\n    const { analysis, days, selected: type, overrideGeneralSetting } = this.state;\n\n    if (!overrideGeneralSetting) {\n      this.resetSetting();\n      return;\n    }\n\n    const value = getSettingValue({ type, analysis, days });\n\n    if (type) {\n      this.setState({ saving: true });\n      setNewCodePeriod({\n        project: component.key,\n        type,\n        value\n      }).then(\n        () => {\n          this.setState({\n            saving: false,\n            currentSetting: type,\n            currentSettingValue: value || undefined,\n            success: true\n          });\n          this.resetSuccess();\n        },\n        () => {\n          this.setState({ saving: false });\n        }\n      );\n    }\n  };\n\n  renderHeader() {\n    return (\n      <header className=\"page-header\">\n        <h1 className=\"page-title\">{translate('project_baseline.page')}</h1>\n        <p className=\"page-description\">\n          <FormattedMessage\n            defaultMessage={translate('project_baseline.page.description')}\n            id=\"project_baseline.page.description\"\n            values={{\n              link: (\n                <Link to=\"/documentation/project-administration/new-code-period/\">\n                  {translate('project_baseline.page.description.link')}\n                </Link>\n              )\n            }}\n          />\n          <br />\n          {this.props.canAdmin && (\n            <FormattedMessage\n              defaultMessage={translate('project_baseline.page.description2')}\n              id=\"project_baseline.page.description2\"\n              values={{\n                link: (\n                  <Link to=\"/admin/settings?category=new_code_period\">\n                    {translate('project_baseline.page.description2.link')}\n                  </Link>\n                )\n              }}\n            />\n          )}\n        </p>\n      </header>\n    );\n  }\n\n  render() {\n    const { branchLikes, branchesEnabled, component } = this.props;\n    const {\n      analysis,\n      currentSetting,\n      days,\n      generalSetting,\n      loading,\n      currentSettingValue,\n      overrideGeneralSetting,\n      saving,\n      selected,\n      success\n    } = this.state;\n\n    return (\n      <>\n        <Suggestions suggestions=\"project_baseline\" />\n        <div className=\"page page-limited\">\n          {this.renderHeader()}\n          {loading ? (\n            <DeferredSpinner />\n          ) : (\n            <div className=\"panel-white project-baseline\">\n              {branchesEnabled && <h2>{translate('project_baseline.default_setting')}</h2>}\n\n              {generalSetting && overrideGeneralSetting !== undefined && (\n                <ProjectBaselineSelector\n                  analysis={analysis}\n                  branchesEnabled={branchesEnabled}\n                  component={component.key}\n                  currentSetting={currentSetting}\n                  currentSettingValue={currentSettingValue}\n                  days={days}\n                  generalSetting={generalSetting}\n                  onCancel={this.handleCancel}\n                  onSelectAnalysis={this.handleSelectAnalysis}\n                  onSelectDays={this.handleSelectDays}\n                  onSelectSetting={this.handleSelectSetting}\n                  onSubmit={this.handleSubmit}\n                  onToggleSpecificSetting={this.handleToggleSpecificSetting}\n                  overrideGeneralSetting={overrideGeneralSetting}\n                  saving={saving}\n                  selected={selected}\n                />\n              )}\n\n              <div className={classNames('spacer-top', { invisible: saving || !success })}>\n                <span className=\"text-success\">\n                  <AlertSuccessIcon className=\"spacer-right\" />\n                  {translate('settings.state.saved')}\n                </span>\n              </div>\n              {generalSetting && branchesEnabled && (\n                <div className=\"huge-spacer-top branch-baseline-selector\">\n                  <hr />\n                  <h2>{translate('project_baseline.configure_branches')}</h2>\n                  <BranchList\n                    branchLikes={branchLikes}\n                    component={component}\n                    inheritedSetting={\n                      currentSetting\n                        ? {\n                            type: currentSetting,\n                            value: currentSettingValue\n                          }\n                        : generalSetting\n                    }\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { connect } from 'react-redux';\nimport { getAppState, Store } from '../../../store/rootReducer';\nimport App from './App';\n\nconst mapStateToProps = (state: Store) => ({\n  branchesEnabled: getAppState(state).branchesEnabled,\n  canAdmin: getAppState(state).canAdmin\n});\n\nexport default connect(mapStateToProps)(App);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { SuggestionsContext } from './SuggestionsContext';\n\ninterface Props {\n  suggestions: string;\n}\n\nexport default function Suggestions({ suggestions }: Props) {\n  return (\n    <SuggestionsContext.Consumer>\n      {({ addSuggestions, removeSuggestions }) => (\n        <SuggestionsInner\n          addSuggestions={addSuggestions}\n          removeSuggestions={removeSuggestions}\n          suggestions={suggestions}\n        />\n      )}\n    </SuggestionsContext.Consumer>\n  );\n}\n\ninterface SuggestionsInnerProps {\n  addSuggestions: (key: string) => void;\n  removeSuggestions: (key: string) => void;\n  suggestions: string;\n}\n\nclass SuggestionsInner extends React.PureComponent<SuggestionsInnerProps> {\n  componentDidMount() {\n    this.props.addSuggestions(this.props.suggestions);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.suggestions !== this.props.suggestions) {\n      this.props.removeSuggestions(this.props.suggestions);\n      this.props.addSuggestions(prevProps.suggestions);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeSuggestions(this.props.suggestions);\n  }\n\n  render() {\n    return null;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { DateSource, FormattedDate } from 'react-intl';\nimport { parseDate } from 'sonar-ui-common/helpers/dates';\n\ninterface Props {\n  children?: (formattedDate: string) => React.ReactNode;\n  date: DateSource;\n}\n\nexport const formatterOption = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric'\n};\n\nexport default function DateTimeFormatter({ children, date }: Props) {\n  return (\n    <FormattedDate value={parseDate(date)} {...formatterOption}>\n      {children}\n    </FormattedDate>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { DateSource, FormattedDate } from 'react-intl';\nimport { parseDate } from 'sonar-ui-common/helpers/dates';\n\ninterface Props {\n  children?: (formattedDate: string) => React.ReactNode;\n  date: DateSource;\n  long?: boolean;\n}\n\nexport const formatterOption = { year: 'numeric', month: 'short', day: '2-digit' };\n\nexport const longFormatterOption = { year: 'numeric', month: 'long', day: 'numeric' };\n\nexport default function DateFormatter({ children, date, long }: Props) {\n  return (\n    <FormattedDate value={parseDate(date)} {...(long ? longFormatterOption : formatterOption)}>\n      {children}\n    </FormattedDate>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum MetricKey {\n  alert_status = 'alert_status',\n  blocker_violations = 'blocker_violations',\n  branch_coverage = 'branch_coverage',\n  bugs = 'bugs',\n  burned_budget = 'burned_budget',\n  business_value = 'business_value',\n  class_complexity = 'class_complexity',\n  classes = 'classes',\n  code_smells = 'code_smells',\n  cognitive_complexity = 'cognitive_complexity',\n  comment_lines = 'comment_lines',\n  comment_lines_data = 'comment_lines_data',\n  comment_lines_density = 'comment_lines_density',\n  complexity = 'complexity',\n  complexity_in_classes = 'complexity_in_classes',\n  complexity_in_functions = 'complexity_in_functions',\n  conditions_to_cover = 'conditions_to_cover',\n  confirmed_issues = 'confirmed_issues',\n  coverage = 'coverage',\n  critical_violations = 'critical_violations',\n  development_cost = 'development_cost',\n  directories = 'directories',\n  duplicated_blocks = 'duplicated_blocks',\n  duplicated_files = 'duplicated_files',\n  duplicated_lines = 'duplicated_lines',\n  duplicated_lines_density = 'duplicated_lines_density',\n  duplications_data = 'duplications_data',\n  effort_to_reach_maintainability_rating_a = 'effort_to_reach_maintainability_rating_a',\n  executable_lines_data = 'executable_lines_data',\n  false_positive_issues = 'false_positive_issues',\n  file_complexity = 'file_complexity',\n  file_complexity_distribution = 'file_complexity_distribution',\n  filename_size = 'filename_size',\n  filename_size_rating = 'filename_size_rating',\n  files = 'files',\n  function_complexity = 'function_complexity',\n  function_complexity_distribution = 'function_complexity_distribution',\n  functions = 'functions',\n  generated_lines = 'generated_lines',\n  generated_ncloc = 'generated_ncloc',\n  info_violations = 'info_violations',\n  last_change_on_maintainability_rating = 'last_change_on_maintainability_rating',\n  last_change_on_releasability_rating = 'last_change_on_releasability_rating',\n  last_change_on_reliability_rating = 'last_change_on_reliability_rating',\n  last_change_on_security_rating = 'last_change_on_security_rating',\n  last_change_on_security_review_rating = 'last_change_on_security_review_rating',\n  last_commit_date = 'last_commit_date',\n  leak_projects = 'leak_projects',\n  line_coverage = 'line_coverage',\n  lines = 'lines',\n  lines_to_cover = 'lines_to_cover',\n  maintainability_rating_effort = 'maintainability_rating_effort',\n  major_violations = 'major_violations',\n  minor_violations = 'minor_violations',\n  ncloc = 'ncloc',\n  ncloc_data = 'ncloc_data',\n  ncloc_language_distribution = 'ncloc_language_distribution',\n  new_blocker_violations = 'new_blocker_violations',\n  new_branch_coverage = 'new_branch_coverage',\n  new_bugs = 'new_bugs',\n  new_code_smells = 'new_code_smells',\n  new_conditions_to_cover = 'new_conditions_to_cover',\n  new_coverage = 'new_coverage',\n  new_critical_violations = 'new_critical_violations',\n  new_development_cost = 'new_development_cost',\n  new_duplicated_blocks = 'new_duplicated_blocks',\n  new_duplicated_lines = 'new_duplicated_lines',\n  new_duplicated_lines_density = 'new_duplicated_lines_density',\n  new_info_violations = 'new_info_violations',\n  new_line_coverage = 'new_line_coverage',\n  new_lines = 'new_lines',\n  new_lines_to_cover = 'new_lines_to_cover',\n  new_maintainability_rating = 'new_maintainability_rating',\n  new_major_violations = 'new_major_violations',\n  new_minor_violations = 'new_minor_violations',\n  new_reliability_rating = 'new_reliability_rating',\n  new_reliability_remediation_effort = 'new_reliability_remediation_effort',\n  new_security_hotspots = 'new_security_hotspots',\n  new_security_hotspots_reviewed = 'new_security_hotspots_reviewed',\n  new_security_rating = 'new_security_rating',\n  new_security_remediation_effort = 'new_security_remediation_effort',\n  new_security_review_rating = 'new_security_review_rating',\n  new_sqale_debt_ratio = 'new_sqale_debt_ratio',\n  new_technical_debt = 'new_technical_debt',\n  new_uncovered_conditions = 'new_uncovered_conditions',\n  new_uncovered_lines = 'new_uncovered_lines',\n  new_violations = 'new_violations',\n  new_vulnerabilities = 'new_vulnerabilities',\n  open_issues = 'open_issues',\n  projects = 'projects',\n  public_api = 'public_api',\n  public_documented_api_density = 'public_documented_api_density',\n  public_undocumented_api = 'public_undocumented_api',\n  quality_gate_details = 'quality_gate_details',\n  quality_profiles = 'quality_profiles',\n  releasability_effort = 'releasability_effort',\n  releasability_rating = 'releasability_rating',\n  reliability_rating = 'reliability_rating',\n  reliability_rating_effort = 'reliability_rating_effort',\n  reliability_remediation_effort = 'reliability_remediation_effort',\n  reopened_issues = 'reopened_issues',\n  security_hotspots = 'security_hotspots',\n  security_hotspots_reviewed = 'security_hotspots_reviewed',\n  security_rating = 'security_rating',\n  security_rating_effort = 'security_rating_effort',\n  security_remediation_effort = 'security_remediation_effort',\n  security_review_rating = 'security_review_rating',\n  security_review_rating_effort = 'security_review_rating_effort',\n  skipped_tests = 'skipped_tests',\n  sonarjava_feedback = 'sonarjava_feedback',\n  sqale_debt_ratio = 'sqale_debt_ratio',\n  sqale_index = 'sqale_index',\n  sqale_rating = 'sqale_rating',\n  statements = 'statements',\n  team_at_sonarsource = 'team_at_sonarsource',\n  team_size = 'team_size',\n  test_errors = 'test_errors',\n  test_execution_time = 'test_execution_time',\n  test_failures = 'test_failures',\n  test_success_density = 'test_success_density',\n  tests = 'tests',\n  uncovered_conditions = 'uncovered_conditions',\n  uncovered_lines = 'uncovered_lines',\n  violations = 'violations',\n  vulnerabilities = 'vulnerabilities',\n  wont_fix_issues = 'wont_fix_issues'\n}\n\nexport function isMetricKey(key: string): key is MetricKey {\n  return (Object.values(MetricKey) as string[]).includes(key);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { chunk, flatMap, groupBy, sortBy } from 'lodash';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { get, save } from 'sonar-ui-common/helpers/storage';\nimport { localizeMetric } from '../../helpers/measures';\nimport { MetricKey } from '../../types/metrics';\nimport { GraphType, MeasureHistory, Serie } from '../../types/project-activity';\n\nexport const DEFAULT_GRAPH = GraphType.issues;\n\nconst GRAPHS_METRICS_DISPLAYED: T.Dict<string[]> = {\n  [GraphType.issues]: [MetricKey.bugs, MetricKey.code_smells, MetricKey.vulnerabilities],\n  [GraphType.coverage]: [MetricKey.lines_to_cover, MetricKey.uncovered_lines],\n  [GraphType.duplications]: [MetricKey.ncloc, MetricKey.duplicated_lines]\n};\n\nconst GRAPHS_METRICS: T.Dict<string[]> = {\n  [GraphType.issues]: GRAPHS_METRICS_DISPLAYED[GraphType.issues].concat([\n    MetricKey.reliability_rating,\n    MetricKey.security_rating,\n    MetricKey.sqale_rating\n  ]),\n  [GraphType.coverage]: [...GRAPHS_METRICS_DISPLAYED[GraphType.coverage], MetricKey.coverage],\n  [GraphType.duplications]: [\n    ...GRAPHS_METRICS_DISPLAYED[GraphType.duplications],\n    MetricKey.duplicated_lines_density\n  ]\n};\n\nexport function isCustomGraph(graph: GraphType) {\n  return graph === GraphType.custom;\n}\n\nexport function getGraphTypes(ignoreCustom = false) {\n  const graphs = [GraphType.issues, GraphType.coverage, GraphType.duplications];\n  return ignoreCustom ? graphs : [...graphs, GraphType.custom];\n}\n\nexport function hasDataValues(serie: Serie) {\n  return serie.data.some(point => Boolean(point.y || point.y === 0));\n}\n\nexport function hasHistoryData(series: Serie[]) {\n  return series.some(serie => serie.data && serie.data.length > 1);\n}\n\nexport function getSeriesMetricType(series: Serie[]) {\n  return series.length > 0 ? series[0].type : 'INT';\n}\n\nexport function getDisplayedHistoryMetrics(graph: GraphType, customMetrics: string[]) {\n  return isCustomGraph(graph) ? customMetrics : GRAPHS_METRICS_DISPLAYED[graph];\n}\n\nexport function getHistoryMetrics(graph: GraphType, customMetrics: string[]) {\n  return isCustomGraph(graph) ? customMetrics : GRAPHS_METRICS[graph];\n}\n\nexport function hasHistoryDataValue(series: Serie[]) {\n  return series.some(serie => serie.data && serie.data.length > 1 && hasDataValues(serie));\n}\n\nexport function splitSeriesInGraphs(series: Serie[], maxGraph: number, maxSeries: number) {\n  return flatMap(\n    groupBy(series, serie => serie.type),\n    type => chunk(type, maxSeries)\n  ).slice(0, maxGraph);\n}\n\nexport function generateCoveredLinesMetric(\n  uncoveredLines: MeasureHistory,\n  measuresHistory: MeasureHistory[]\n) {\n  const linesToCover = measuresHistory.find(measure => measure.metric === MetricKey.lines_to_cover);\n  return {\n    data: linesToCover\n      ? uncoveredLines.history.map((analysis, idx) => ({\n          x: analysis.date,\n          y: Number(linesToCover.history[idx].value) - Number(analysis.value)\n        }))\n      : [],\n    name: 'covered_lines',\n    translatedName: translate('project_activity.custom_metric.covered_lines'),\n    type: 'INT'\n  };\n}\n\nexport function generateSeries(\n  measuresHistory: MeasureHistory[],\n  graph: GraphType,\n  metrics: T.Metric[] | T.Dict<T.Metric>,\n  displayedMetrics: string[]\n): Serie[] {\n  if (displayedMetrics.length <= 0 || measuresHistory === undefined) {\n    return [];\n  }\n  return sortBy(\n    measuresHistory\n      .filter(measure => displayedMetrics.indexOf(measure.metric) >= 0)\n      .map(measure => {\n        if (measure.metric === MetricKey.uncovered_lines && !isCustomGraph(graph)) {\n          return generateCoveredLinesMetric(measure, measuresHistory);\n        }\n        const metric = findMetric(measure.metric, metrics);\n        return {\n          data: measure.history.map(analysis => ({\n            x: analysis.date,\n            y: metric && metric.type === 'LEVEL' ? analysis.value : Number(analysis.value)\n          })),\n          name: measure.metric,\n          translatedName: metric ? getLocalizedMetricName(metric) : localizeMetric(measure.metric),\n          type: metric ? metric.type : 'INT'\n        };\n      }),\n    serie =>\n      displayedMetrics.indexOf(serie.name === 'covered_lines' ? 'uncovered_lines' : serie.name)\n  );\n}\n\nexport function saveActivityGraph(\n  namespace: string,\n  project: string,\n  graph: GraphType,\n  metrics: string[] = []\n) {\n  save(namespace, graph, project);\n  if (isCustomGraph(graph)) {\n    save(`${namespace}.custom`, metrics.join(','), project);\n  }\n}\n\nexport function getActivityGraph(\n  namespace: string,\n  project: string\n): { graph: GraphType; customGraphs: string[] } {\n  const customGraphs = get(`${namespace}.custom`, project);\n  return {\n    graph: (get(namespace, project) as GraphType) || DEFAULT_GRAPH,\n    customGraphs: customGraphs ? customGraphs.split(',') : []\n  };\n}\n\nfunction findMetric(key: string, metrics: T.Metric[] | T.Dict<T.Metric>) {\n  if (Array.isArray(metrics)) {\n    return metrics.find(metric => metric.key === key);\n  }\n  return metrics[key];\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum GraphType {\n  issues = 'issues',\n  coverage = 'coverage',\n  duplications = 'duplications',\n  custom = 'custom'\n}\n\nexport interface HistoryItem {\n  date: Date;\n  value?: string;\n}\n\nexport interface MeasureHistory {\n  metric: string;\n  history: HistoryItem[];\n}\n\nexport interface Serie {\n  data: Point[];\n  name: string;\n  translatedName: string;\n  type: string;\n}\n\nexport interface Point {\n  x: Date;\n  y: number | string | undefined;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { DateSource, FormattedTime } from 'react-intl';\nimport { parseDate } from 'sonar-ui-common/helpers/dates';\n\ninterface Props {\n  children?: (formattedDate: string) => React.ReactNode;\n  date: DateSource;\n  long?: boolean;\n}\n\nexport const formatterOption = { hour: 'numeric', minute: 'numeric' };\n\nexport const longFormatterOption = { hour: 'numeric', minute: 'numeric', second: 'numeric' };\n\nexport default function TimeFormatter({ children, date, long }: Props) {\n  return (\n    <FormattedTime value={parseDate(date)} {...(long ? longFormatterOption : formatterOption)}>\n      {children}\n    </FormattedTime>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { IconProps } from 'sonar-ui-common/components/icons/Icon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { isPullRequest } from '../../helpers/branch-like';\nimport { BranchLike } from '../../types/branch-like';\n\nexport interface BranchLikeIconProps extends IconProps {\n  branchLike: BranchLike;\n}\n\nexport default function BranchLikeIcon({ branchLike, ...props }: BranchLikeIconProps) {\n  if (isPullRequest(branchLike)) {\n    return <PullRequestIcon {...props} />;\n  } else {\n    return <BranchIcon {...props} />;\n  }\n}\n"],"sourceRoot":""}