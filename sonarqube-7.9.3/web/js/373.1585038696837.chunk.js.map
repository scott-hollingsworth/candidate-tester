{"version":3,"sources":["webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/utils.ts","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/SnippetViewer.tsx","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/ComponentSourceSnippetViewer.tsx","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/CrossComponentSourceViewerWrapper.tsx"],"names":["LINES_ABOVE","LINES_BELOW","MERGE_DISTANCE","LINES_BELOW_LAST","EXPAND_BY_LINES","collision","_a","_b","startA","endA","startB","getPrimaryLocation","issue","component","textRange","endLine","endOffset","startLine","startOffset","rangesToSnippets","ranges","componentLines","map","range","lines","i","start","end","push","filter","snippet","length","expandSnippet","direction","snippetIndex","snippets","snippetToExpand","snippetToExpandRange","Math","max","line","forEach","index","snippetRange","min","SCROLL_LEFT_OFFSET","_super","SnippetViewer","props","_this","call","this","doScroll","element","scroll","parent","node","current","Object","scrolling","leftOffset","rightOffset","getBoundingClientRect","width","expandBlock","index_js_exposed","__extends","prototype","renderLine","displayDuplications","issuesForLine","issueLocations","symbols","verticalBuffer","secondaryIssueLocations","helpers_issueLocations","locations","duplications","duplicationsByLine","duplicationsCount","lineDuplications","isSinkLine","some","key","Line","branchLike","displayAllIssues","displayCoverage","displayIssues","displayLocationMarkers","highlighted","highlightedLocationMessage","helpers_lines","highlightedSymbols","issuePopup","issues","last","linePopup","loadDuplications","onIssueChange","onIssuePopupToggle","onIssueSelect","onIssueUnselect","onIssuesClose","handleCloseIssues","onIssuesOpen","handleOpenIssues","onLinePopupToggle","handleLinePopupToggle","onLocationSelect","onSymbolClick","handleSymbolClick","openIssues","openIssuesByLine","previousLine","undefined","renderDuplicationPopup","selectedIssue","render","issuesByLine","locationsByLine","lastLine","measures","parseInt","indexing","bottomLine","issueLine","lowestVisibleIssue","apply","keys","k","l","inSnippet","s","duplicated","className","ref","colSpan","aria-label","l10n","onClick","type","ExpandSnippetIcon","ComponentSourceSnippetViewer","arguments","mounted","state","additionalLines","loading","snippetGroup","extension","from","to","api_components","ComponentSourceSnippetViewer_assign","branches","then","reduce","lineMap","coverageStatus","getCoverageStatus","newLinesMapped","setState","combinedLines","sources","expandComponent","ComponentSourceSnippetViewer_extends","componentDidMount","createSnippetsFromProps","componentWillUnmount","secondaryLocations","concat","loc","firstCollision","startIndex","endIndex","keep","renderSnippet","crossComponentSourceViewer_SnippetViewer","fullyShown","classnames","source-duplications-expanded","SourceViewerHeaderSlim","expandable","onExpand","sourceViewerFile","CrossComponentSourceViewerWrapper_CrossComponentSourceViewerWrapper","CrossComponentSourceViewerWrapper","components","notAccessible","fetchDuplications","CrossComponentSourceViewerWrapper_assign","r","duplicatedFiles","files","name","handleIssuePopupToggle","popupName","open","samePopup","handleCloseLinePopup","blocks","helpers_duplications","context","Consumer","openComponent","DuplicationPopup","inRemovedComponent","onClose","CrossComponentSourceViewerWrapper_extends","fetchIssueFlowSnippets","componentWillReceiveProps","newProps","issueKey","onLoaded","response","status","throwGlobalError","DeferredSpinner","Alert","variant","issuesByComponent","locationsByComponent","currentGroup","currentComponent","groups","__assign","path","project","projectName","q","uuid","groupLocationsByComponent","componentProps","SourceViewerContext","Provider","selectedFlowIndex","value","file","crossComponentSourceViewer_ComponentSourceSnippetViewer"],"mappings":"yUAmBMA,EAAc,EACdC,EAAc,EACPC,EAAiB,EACjBC,EAAmB,EACnBC,EAAkB,GAiB/B,SAASC,EAAUC,EAA0BC,OAAzBC,EAAAF,EAAA,GAAQG,EAAAH,EAAA,GAAkBI,EAAAH,EAAA,GAC5C,QAASC,EAD2CD,EAAA,GAC3BL,GAAkBO,EAAOC,EAASR,GAG7D,SAASS,EAAmBC,GAC1B,MAAO,CACLC,UAAWD,EAAMC,UACjBC,UAAWF,EAAME,WAAa,CAC5BC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,YAAa,IA2DnB,SAASC,EACPC,EACAC,GAEA,OAAOD,EACJE,IAAI,SAAAC,GAEH,IADA,IAAMC,EAAQ,GACLC,EAAIF,EAAMG,MAAOD,GAAKF,EAAMI,IAAKF,IACpCJ,EAAeI,IACjBD,EAAMI,KAAKP,EAAeI,IAG9B,OAAOD,IAERK,OAAO,SAAAC,GAAW,OAAAA,EAAQC,OAAR,IA2BjB,SAAUC,EAAc1B,OAC5B2B,EAAA3B,EAAA2B,UACAT,EAAAlB,EAAAkB,MACAU,EAAA5B,EAAA4B,aACAC,EAAA7B,EAAA6B,SAOMC,EAAkBD,EAASD,GAE3BG,EAAuB,CAC3BX,MAAOY,KAAKC,IAAI,EAAGH,EAAgB,GAAGI,MAAsB,OAAdP,EAAqB7B,EAAkB,IACrFuB,IACES,EAAgBA,EAAgBL,OAAS,GAAGS,MAC7B,SAAdP,EAAuB7B,EAAkB,IAGxCgB,EAAgD,GA0BtD,OAxBAe,EAASM,QAAQ,SAACX,EAASY,GACzB,IAAMC,EAAe,CACnBjB,MAAOI,EAAQ,GAAGU,KAClBb,IAAKG,EAAQA,EAAQC,OAAS,GAAGS,MAG/BE,IAAUR,EAEZd,EAAOQ,KAAKS,GAEZhC,EACE,CAACsC,EAAajB,MAAOiB,EAAahB,KAClC,CAACU,EAAqBX,MAAOW,EAAqBV,OAIpDU,EAAqBX,MAAQY,KAAKM,IAAID,EAAajB,MAAOW,EAAqBX,OAC/EW,EAAqBV,IAAMW,KAAKC,IAAII,EAAahB,IAAKU,EAAqBV,MAG3EP,EAAOQ,KAAKe,KAITxB,EAAiBC,EAAQI,gYCtI5BqB,EAAqB,KAE3B,SAAAC,GAGE,SAAAC,EAAYC,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YAIdF,EAAAG,SAAW,SAACC,GACNJ,EAAKD,MAAMM,QACbL,EAAKD,MAAMM,OAAOD,GAEpB,IAAME,EAASN,EAAKO,KAAKC,QAErBF,GACFG,OAAAC,EAAA,EAAAD,CAAmBL,EAAS,CAC1BO,WAAYf,EACZgB,YAAaN,EAAOO,wBAAwBC,MAAQlB,EACpDU,OAAMA,KAKZN,EAAAe,YAAc,SAAC/B,GAAiC,kBAC9C,OAAAgB,EAAKD,MAAMgB,YAAYf,EAAKD,MAAMN,MAAOT,KAnBzCgB,EAAKO,KAAOS,EAAA,cAsKhB,OA3K2CC,EAAAnB,EAAAD,GA0BzCC,EAAAoB,UAAAC,WAAA,SAAW9D,GAAX,IAAA2C,EAAAE,KACEkB,EAAA/D,EAAA+D,oBACA3B,EAAApC,EAAAoC,MACA4B,EAAAhE,EAAAgE,cACAC,EAAAjE,EAAAiE,eACA/B,EAAAlC,EAAAkC,KACAV,EAAAxB,EAAAwB,QACA0C,EAAAlE,EAAAkE,QACAC,EAAAnE,EAAAmE,eAWMC,EAA0BhB,OAAAiB,EAAA,EAAAjB,CAAkClB,EAAMW,KAAKH,MAAM4B,WAE7ErE,EAAA4C,KAAAH,MAAE6B,EAAAtE,EAAAsE,aAAcC,EAAAvE,EAAAuE,mBAChBC,EAAoBF,EAAeA,EAAa9C,OAAS,EACzDiD,EACHD,GAAqBD,GAAsBA,EAAmBtC,EAAKA,OAAU,GAE1EyC,EAAaX,EAAcY,KAAK,SAAAzD,GAAK,OAAAA,EAAE0D,MAAQlC,EAAKD,MAAMpC,MAArBuE,MAE3C,OACElB,EAAA,cAACmB,EAAA,EAAI,CACHC,WAAYlC,KAAKH,MAAMqC,WACvBC,kBAAkB,EAClBC,iBAAiB,EACjBlB,oBAAqBA,EACrBmB,eAAgBP,GAAcX,EAAcvC,OAAS,EACrD0D,wBAAwB,EACxBZ,aAAcG,EACdD,kBAAmBA,EACnBW,aAAa,EACbC,2BAA4BjC,OAAAkC,EAAA,EAAAlC,CAC1BP,KAAKH,MAAM2C,2BACXjB,GAEFmB,mBAAoBnC,OAAAkC,EAAA,EAAAlC,CAA2Bc,EAASrB,KAAKH,MAAM6C,oBACnEtB,eAAgBA,EAChBuB,WAAY3C,KAAKH,MAAM8C,WACvBC,OAAQzB,EACRa,IAAK3C,EAAKA,KACVwD,MAAM,EACNxD,KAAMA,EACNyD,UAAW9C,KAAKH,MAAMiD,UACtBC,iBAAkB/C,KAAKH,MAAMkD,iBAC7BC,cAAehD,KAAKH,MAAMmD,cAC1BC,mBAAoBjD,KAAKH,MAAMoD,mBAC/BC,cAAe,aACfC,gBAAiB,aACjBC,cAAepD,KAAKH,MAAMwD,kBAC1BC,aAActD,KAAKH,MAAM0D,iBACzBC,kBAAmBxD,KAAKH,MAAM4D,sBAC9BC,iBAAkB1D,KAAKH,MAAM6D,iBAC7BC,cAAe3D,KAAKH,MAAM+D,kBAC1BC,WAAY7D,KAAKH,MAAMiE,iBAAiBzE,EAAKA,MAC7C0E,aAAcxE,EAAQ,EAAIZ,EAAQY,EAAQ,QAAKyE,EAC/CC,uBAAwBjE,KAAKH,MAAMoE,uBACnC9D,OAAQH,KAAKC,SACbsB,wBAAyBA,EACzB2C,cAAe3D,OAAAkC,EAAA,EAAAlC,CAAsBP,KAAKH,MAAMpC,MAAMuE,IAAKb,GAC3DG,eAAgBA,KAKtB1B,EAAAoB,UAAAmD,OAAA,eAAArE,EAAAE,KACQ7C,EAAA6C,KAAAH,MACJnC,EAAAP,EAAAO,UACAD,EAAAN,EAAAM,MACAL,EAAAD,EAAAiH,oBAAA,IAAAhH,EAAA,GAAAA,EACAyF,EAAA1F,EAAA0F,KACAwB,EAAAlH,EAAAkH,gBACAP,EAAA3G,EAAA2G,iBACAnF,EAAAxB,EAAAwB,QAEI2F,EACJ5G,EAAU6G,UAAY7G,EAAU6G,SAASlG,OAASmG,SAAS9G,EAAU6G,SAASlG,MAAO,IAEjFgD,EAAUd,OAAAkE,EAAA,EAAAlE,CAAc5B,GAExB+F,EAAa/F,EAAQA,EAAQC,OAAS,GAAGS,KACzCsF,EAAYlH,EAAME,UAAYF,EAAME,UAAUC,QAAUH,EAAM4B,KAC9DuF,EAAqBzF,KAAKC,IAAGyF,MAAR1F,KACtBoB,OAAOuE,KAAKV,GACZjG,IAAI,SAAA4G,GAAK,OAAAP,SAASO,EAAT,MACTrG,OAAO,SAAAsG,GAAK,ODiBf,SAAoB3F,EAAcV,GACtC,OAAOU,GAAQV,EAAQ,GAAGU,MAAQA,GAAQV,EAAQA,EAAQC,OAAS,GAAGS,KClBnD4F,CAAUD,EAAGrG,KAAaqG,IAAML,GAAab,EAA7CkB,OAEX1D,EAAiBuB,EACnB1D,KAAKC,IAAI,EAAGpC,GAAoB0H,EAAaE,IAC7C,EAEE1D,EAAsBvC,EAAQoD,KAAK,SAAAmD,GAAK,QAAEA,EAAFC,aAE9C,OACErE,EAAA,qBAAKsE,UAAU,6BAA6BC,IAAKrF,KAAKK,MACpDS,EAAA,uBAAOsE,UAAU,gBACftE,EAAA,2BACGnC,EAAQ,GAAGU,KAAO,GACjByB,EAAA,oBAAIsE,UAAU,mCACZtE,EAAA,oBAAIwE,QAAS,GACXxE,EAAA,wBAAAyE,aACchF,OAAAiF,EAAA,EAAAjF,CAAU,8BACtBkF,QAASzF,KAAKa,YAAY,MAC1B6E,KAAK,UACL5E,EAAA,cAAC6E,EAAA,EAAiB,SAKzBhH,EAAQR,IAAI,SAACkB,EAAME,GAClB,OAAAO,EAAKmB,WAAW,CACdC,oBAAmBA,EACnB3B,MAAKA,EACL4B,cAAeiD,EAAa/E,EAAKA,OAAS,GAC1C+B,eAAgBiD,EAAgBhF,EAAKA,OAAS,GAC9CA,KAAIA,EACJV,QAAOA,EACP0C,QAASA,EAAQhC,EAAKA,MACtBiC,eAAgB/B,IAAUZ,EAAQC,OAAS,EAAI0C,EAAiB,QAGjEgD,GAAY3F,EAAQA,EAAQC,OAAS,GAAGS,KAAOiF,IAChDxD,EAAA,oBAAIsE,UAAU,mCACZtE,EAAA,oBAAIwE,QAAS,GACXxE,EAAA,wBAAAyE,aACchF,OAAAiF,EAAA,EAAAjF,CAAU,8BACtBkF,QAASzF,KAAKa,YAAY,QAC1B6E,KAAK,UACL5E,EAAA,cAAC6E,EAAA,EAAiB,aAUtC/F,EA3KA,CAA2CkB,EAAA,ilBCH3C,SAAAnB,GAAA,SAAAiG,IAAA,IAAA9F,EAAA,OAAAH,KAAAkF,MAAA7E,KAAA6F,YAAA7F,YACEF,EAAAgG,SAAU,EACVhG,EAAAiG,MAAe,CACbC,gBAAiB,GACjBtD,mBAAoB,GACpBuD,SAAS,EACTnC,iBAAkB,GAClB9E,SAAU,IAsBZc,EAAAe,YAAc,SAAC9B,EAAsBD,GAC7B,IAAA3B,EAAA2C,EAAAD,MAAEqC,EAAA/E,EAAA+E,WACAF,EADY7E,EAAA+I,aACZxI,UAAAsE,IAGFrD,EAFEmB,EAAAiG,MAAA/G,SAEiBD,GAGnBoH,EAAYlJ,EAAkBF,EAAiB,EAE/CqB,EACU,OAAdU,EACI,CACEsH,KAAMjH,KAAKC,IAAI,EAAGT,EAAQ,GAAGU,KAAO8G,GACpCE,GAAI1H,EAAQ,GAAGU,KAAO,GAExB,CACE+G,KAAMzH,EAAQA,EAAQC,OAAS,GAAGS,KAAO,EACzCgH,GAAI1H,EAAQA,EAAQC,OAAS,GAAGS,KAAO8G,GAG/C5F,OAAA+F,EAAA,EAAA/F,CAAUgG,EAAA,CACRvE,IAAGA,GACA5D,EACAmC,OAAAiG,EAAA,EAAAjG,CAAmB2B,KAErBuE,KAAK,SAAApI,GACJ,OAAAA,EAAMqI,OAAO,SAACC,EAA+BtH,GAG3C,OAFAA,EAAKuH,eAAiBrG,OAAAsG,EAAA,EAAAtG,CAAkBlB,GACxCsH,EAAQtH,EAAKA,MAAQA,EACdsH,GACN,MAEJF,KACC,SAAAK,GACMhH,EAAKgG,SACPhG,EAAKiH,SAAS,SAAC5J,OAAE6I,EAAA7I,EAAA6I,gBAAiBhH,EAAA7B,EAAA6B,SAC1BgI,EAAaT,EAAA,GAAQP,EAAoBc,GAE/C,MAAO,CACLd,gBAAiBgB,EACjBhI,SAAUH,EAAc,CACtBC,UAASA,EACTT,MAAKkI,EAAA,GAAOS,EAAkBlH,EAAKD,MAAMqG,aAAae,SACtDlI,aAAYA,EACZC,SAAQA,QAMlB,eAINc,EAAAoH,gBAAkB,WACV,IAAA/J,EAAA2C,EAAAD,MAAEqC,EAAA/E,EAAA+E,WACAF,EADY7E,EAAA+I,aACZxI,UAAAsE,IAERlC,EAAKiH,SAAS,CAAEd,SAAS,IAEzB1F,OAAA+F,EAAA,EAAA/F,CAAUgG,EAAA,CAAGvE,IAAGA,GAAKzB,OAAAiG,EAAA,EAAAjG,CAAmB2B,KAAeuE,KACrD,SAAApI,GACMyB,EAAKgG,SACPhG,EAAKiH,SAAS,CAAEd,SAAS,EAAOjH,SAAU,CAACX,MAG/C,WACMyB,EAAKgG,SACPhG,EAAKiH,SAAS,CAAEd,SAAS,OAMjCnG,EAAA2D,sBAAwB,SAACX,GACvBhD,EAAKD,MAAM2D,kBAAiB+C,EAAA,GACvBzD,EAAS,CACZpF,UAAWoC,EAAKD,MAAMqG,aAAaxI,UAAUsE,QAIjDlC,EAAAyD,iBAAmB,SAAClE,GAClBS,EAAKiH,SAAS,SAAAhB,SAAS,MAAC,CACtBjC,iBAAgByC,EAAA,GAAOR,EAAMjC,kBAAgB3G,EAAA,GAAAA,EAAGkC,EAAKA,OAAO,EAAIlC,QAIpE2C,EAAAuD,kBAAoB,SAAChE,GACnBS,EAAKiH,SAAS,SAAAhB,SAAS,MAAC,CACtBjC,iBAAgByC,EAAA,GAAOR,EAAMjC,kBAAgB3G,EAAA,GAAAA,EAAGkC,EAAKA,OAAO,EAAKlC,QAIrE2C,EAAA8D,kBAAoB,SAAClB,GACnB5C,EAAKiH,SAAS,CAAErE,mBAAkBA,KAGpC5C,EAAAiD,iBAAmB,SAAC1D,GAClBS,EAAKD,MAAMkD,iBAAiBjD,EAAKD,MAAMqG,aAAaxI,UAAUsE,IAAK3C,IAGrES,EAAAmE,uBAAyB,SAAC1E,EAAeF,GACvC,OAAOS,EAAKD,MAAMoE,uBAAuBnE,EAAKD,MAAMqG,aAAaxI,UAAW6B,EAAOF,MAiFvF,OArN0D8H,EAAAvB,EAAAjG,GAUxDiG,EAAA5E,UAAAoG,kBAAA,WACEpH,KAAK8F,SAAU,EACf9F,KAAKqH,2BAGPzB,EAAA5E,UAAAsG,qBAAA,WACEtH,KAAK8F,SAAU,GAGjBF,EAAA5E,UAAAqG,wBAAA,WACE,IFzBF5F,EACAvD,EACA2E,EACApF,EEsBQuB,GFzBRyC,EE0BIzB,KAAKH,MAAMqG,aAAazE,UFzB5BvD,EE0BI8B,KAAKH,MAAMqG,aAAae,QFzB5BpE,EE0BI7C,KAAKH,MAAMgD,KFzBfpF,EE0BIuC,KAAKH,MAAMpC,MAAM8J,mBAAmB3I,OAAS,EAAIoB,KAAKH,MAAMpC,WAAQuG,OF5BxE,IAAA9F,MAAA,IAIOF,GAGJP,EAAO,CAAED,EAAmBC,IAAM+J,OAAK/F,GAAaA,GAAWiF,OAC9D,SAAC1H,EAAiDyI,EAAKlI,GACrD,IAOImI,EAPEC,EAAaxI,KAAKC,IAAI,EAAGqI,EAAI9J,UAAUG,UAAYjB,GACnD+K,EACJH,EAAI9J,UAAUC,SACZH,GAAmB,IAAV8B,GAAiBsD,GAAQtD,IAAUkC,EAAU7C,OAAS,EAC7D5B,EACAF,GA8BN,OAzBAkC,EAAWA,EAASN,OAAO,SAAAC,GACzB,GAAIzB,EAAU,CAACyB,EAAQJ,MAAOI,EAAQH,KAAM,CAACmJ,EAAYC,IAAY,CACnE,IAAIC,GAAO,EAWX,OATKH,IACHA,EAAiB/I,EACjBkJ,GAAO,GAGTH,EAAenJ,MAAQY,KAAKM,IAAIkI,EAAYhJ,EAAQJ,MAAOmJ,EAAenJ,OAC1EmJ,EAAelJ,IAAMW,KAAKC,IAAIwI,EAAUjJ,EAAQH,IAAKkJ,EAAelJ,KAG7DqJ,EAET,OAAO,SAGc7D,IAAnB0D,GACF1I,EAASP,KAAK,CACZF,MAAOoJ,EACPnJ,IAAKoJ,IAIF5I,GAET,IAEFd,IElBA8B,KAAK+G,SAAS,CAAE/H,SAAQA,KA6G1B4G,EAAA5E,UAAA8G,cAAA,SAAc3K,OACZoC,EAAApC,EAAAoC,MACA6E,EAAAjH,EAAAiH,aACAvB,EAAA1F,EAAA0F,KACAwB,EAAAlH,EAAAkH,gBACA1F,EAAAxB,EAAAwB,QAQA,OACEmC,EAAA,cAACiH,EAAa,CACZ7F,WAAYlC,KAAKH,MAAMqC,WACvBxE,UAAWsC,KAAKH,MAAMqG,aAAaxI,UACnCmD,YAAab,KAAKa,YAClBwC,kBAAmBrD,KAAKqD,kBACxBI,sBAAuBzD,KAAKyD,sBAC5BF,iBAAkBvD,KAAKuD,iBACvBK,kBAAmB5D,KAAK4D,kBACxBpB,2BAA4BxC,KAAKH,MAAM2C,2BACvCE,mBAAoB1C,KAAK+F,MAAMrD,mBAC/BnD,MAAOA,EACP9B,MAAOuC,KAAKH,MAAMpC,MAClBkF,WAAY3C,KAAKH,MAAM8C,WACvByB,aAAcA,EACdpC,IAAKzC,EACLsD,KAAMA,EACNE,iBAAkB/C,KAAK+C,iBACvBtB,UAAWzB,KAAKH,MAAM4B,UACtB4C,gBAAiBA,EACjBrB,cAAehD,KAAKH,MAAMmD,cAC1BC,mBAAoBjD,KAAKH,MAAMoD,mBAC/BS,iBAAkB1D,KAAKH,MAAM6D,iBAC7BI,iBAAkB9D,KAAK+F,MAAMjC,iBAC7BG,uBAAwBjE,KAAKiE,uBAC7B9D,OAAQH,KAAKH,MAAMM,OACnBxB,QAASA,KAKfiH,EAAA5E,UAAAmD,OAAA,eAAArE,EAAAE,KACQ7C,EAAA6C,KAAAH,MAAEqC,EAAA/E,EAAA+E,WAAYR,EAAAvE,EAAAuE,aAAcjE,EAAAN,EAAAM,MAAO2G,EAAAjH,EAAAiH,aAAcvB,EAAA1F,EAAA0F,KAAMqD,EAAA/I,EAAA+I,aACvD9I,EAAA4C,KAAA+F,MAAEE,EAAA7I,EAAA6I,QAASjH,EAAA5B,EAAA4B,SACXyC,EAAYlB,OAAAkE,EAAA,EAAAlE,CAAgB,CAAC9C,IAE7BuK,EACgB,IAApBhJ,EAASJ,QACTsH,EAAaxI,UAAU6G,UACvBvF,EAAS,GAAGJ,SAAW4F,SAAS0B,EAAaxI,UAAU6G,SAASlG,OAAS,GAAI,IAE/E,OACEyC,EAAA,qBACEsE,UAAW6C,EAAW,6BAA8B,CAClDC,+BAAgCxG,GAAgBA,EAAa9C,OAAS,KAExEkC,EAAA,cAACqH,EAAA,EAAsB,CACrBjG,WAAYA,EACZkG,YAAaJ,EACb/B,QAASA,EACToC,SAAUrI,KAAKkH,gBACfoB,iBAAkBpC,EAAaxI,YAEhCsB,EAASb,IAAI,SAACQ,EAASY,GACtB,OAAAO,EAAKgI,cAAc,CACjBnJ,QAAOA,EACPY,MAAKA,EACL6E,aAAcvB,EAAOuB,EAAe,GACpCC,gBAAiBxB,GAAQtD,IAAUP,EAASJ,OAAS,EAAI6C,EAAY,GACrEoB,KAAMA,GAAQtD,IAAUP,EAASJ,OAAS,QAMtDgH,EArNA,CAA0D9E,EAAA,onBCI1DyH,EAAA,SAAA5I,GAAA,SAAA6I,IAAA,IAAA1I,EAAA,OAAAH,KAAAkF,MAAA7E,KAAA6F,YAAA7F,YACEF,EAAAgG,SAAU,EACVhG,EAAAiG,MAAe,CACb0C,WAAY,GACZ9G,mBAAoB,GACpBsE,SAAS,EACTyC,eAAe,GAkBjB5I,EAAA6I,kBAAoB,SAACjL,EAAmB2B,GACtCkB,OAAA+F,EAAA,EAAA/F,CAAeqI,EAAA,CACb5G,IAAKtE,GACF6C,OAAAiG,EAAA,EAAAjG,CAAmBT,EAAKD,MAAMqC,cAChCuE,KACD,SAAAoC,GACM/I,EAAKgG,SACPhG,EAAKiH,SAAS,SAAAhB,GAAS,MAAC,CACtB+C,gBAAiBD,EAAEE,MACnBrH,aAAcmH,EAAEnH,aAChBC,mBAAoBpB,OAAAkE,EAAA,EAAAlE,CAAmBsI,EAAEnH,cACzCoB,UAC4B,IAA1B+F,EAAEnH,aAAa9C,OACX,CAAElB,UAASA,EAAE6B,MAAO,EAAGF,KAAMA,EAAKA,KAAM2J,KAAM,gBAC9CjD,EAAMjD,cAIlB,eA+BJhD,EAAAmJ,uBAAyB,SAACxL,EAAeyL,EAAmBC,GAC1DrJ,EAAKiH,SAAS,SAAChB,GACb,IAAMqD,EACJrD,EAAMpD,YAAcoD,EAAMpD,WAAWqG,OAASE,GAAanD,EAAMpD,WAAWlF,QAAUA,EACxF,OAAa,IAAT0L,GAAmBC,GAEH,IAATD,GAAiBC,EACnB,CAAEzG,gBAAYqB,GAEhB,KAJE,CAAErB,WAAY,CAAElF,MAAKA,EAAEuL,KAAME,OAQ1CpJ,EAAA2D,sBAAwB,SAACtG,OACvBO,EAAAP,EAAAO,UACA6B,EAAApC,EAAAoC,MACAF,EAAAlC,EAAAkC,KACA2J,EAAA7L,EAAA6L,KACAG,EAAAhM,EAAAgM,KAEArJ,EAAKiH,SAAS,SAAChB,GACb,IAAMqD,OACgBpF,IAApB+B,EAAMjD,WACNiD,EAAMjD,UAAUzD,OAASA,GACzB0G,EAAMjD,UAAUkG,OAASA,GACzBjD,EAAMjD,UAAUpF,YAAcA,GAC9BqI,EAAMjD,UAAUvD,QAAUA,EAC5B,OAAa,IAAT4J,GAAmBC,GAEH,IAATD,GAAiBC,EACnB,CAAEtG,eAAWkB,GAEf,KAJE,CAAElB,UAAW,CAAEpF,UAASA,EAAE6B,MAAKA,EAAEF,KAAIA,EAAE2J,KAAIA,OAQxDlJ,EAAAuJ,qBAAuB,WACrBvJ,EAAKiH,SAAS,CAAEjE,eAAWkB,KAG7BlE,EAAAmE,uBAAyB,SAACvG,EAA+B6B,EAAeF,GAChE,IAAAlC,EAAA2C,EAAAiG,MAAE+C,EAAA3L,EAAA2L,gBAAiBpH,EAAAvE,EAAAuE,aAEzB,IAAKhE,IAAcoL,EACjB,OAAO,KAGT,IAAMQ,EAAS/I,OAAAgJ,EAAA,EAAAhJ,CAA6BmB,EAAcnC,GAE1D,OACEuB,EAAA,cAAC0I,EAAA,EAAiBC,SAAQ,KACvB,SAACtM,OAAEuM,EAAAvM,EAAAuM,cAAoB,OACtB5I,EAAA,cAAC6I,EAAA,EAAgB,CACfL,OAAQ/I,OAAAgJ,EAAA,EAAAhJ,CAA8B+I,EAAQjK,GAC9C6C,WAAYpC,EAAKD,MAAMqC,WACvB4G,gBAAiBA,EACjBc,mBAAoBrJ,OAAAgJ,EAAA,EAAAhJ,CAAqC+I,GACzDO,QAAS/J,EAAKuJ,qBACdK,cAAeA,EACfpB,iBAAkB5K,SAqE9B,OAzM+DoM,EAAAtB,EAAA7I,GAS7D6I,EAAAxH,UAAAoG,kBAAA,WACEpH,KAAK8F,SAAU,EACf9F,KAAK+J,uBAAuB/J,KAAKH,MAAMpC,MAAMuE,MAG/CwG,EAAAxH,UAAAgJ,0BAAA,SAA0BC,GACpBA,EAASxM,MAAMuE,MAAQhC,KAAKH,MAAMpC,MAAMuE,KAC1ChC,KAAK+J,uBAAuBE,EAASxM,MAAMuE,MAI/CwG,EAAAxH,UAAAsG,qBAAA,WACEtH,KAAK8F,SAAU,GAyBjB0C,EAAAxH,UAAA+I,uBAAA,SAAuBG,GAAvB,IAAApK,EAAAE,KACEA,KAAK+G,SAAS,CAAEd,SAAS,IACzB1F,OAAAqC,EAAA,EAAArC,CAAqB2J,GAAUzD,KAC7B,SAAAgC,GACM3I,EAAKgG,UACPhG,EAAKiH,SAAS,CACZ0B,WAAUA,EACV9F,gBAAYqB,EACZlB,eAAWkB,EACXiC,SAAS,IAEPnG,EAAKD,MAAMsK,UACbrK,EAAKD,MAAMsK,aAIjB,SAAChN,OAAEiN,EAAAjN,EAAAiN,SACuB,MAApBA,EAASC,QACX9J,OAAA+J,EAAA,EAAA/J,CAAiB,CAAE6J,SAAQA,IAEzBtK,EAAKgG,SACPhG,EAAKiH,SAAS,CAAEd,SAAS,EAAOyC,cAAmC,MAApB0B,EAASC,YAwEhE7B,EAAAxH,UAAAmD,OAAA,eAAArE,EAAAE,KACQ7C,EAAA6C,KAAA+F,MAAEE,EAAA9I,EAAA8I,QAASyC,EAAAvL,EAAAuL,cAEjB,GAAIzC,EACF,OACEnF,EAAA,yBACEA,EAAA,cAACyJ,EAAA,EAAe,OAKtB,GAAI7B,EACF,OACE5H,EAAA,cAAC0J,EAAA,EAAK,CAACpF,UAAU,aAAaqF,QAAQ,WACnClK,OAAAiF,EAAA,EAAAjF,CAAU,yDAKX,IAAAnD,EAAA4C,KAAA+F,MAAE0C,EAAArL,EAAAqL,WAAY/G,EAAAtE,EAAAsE,aAAcC,EAAAvE,EAAAuE,mBAAoBmB,EAAA1F,EAAA0F,UAChD4H,EAAoBnK,OAAAkE,EAAA,EAAAlE,CAAyBP,KAAKH,MAAM+C,QACxD+H,EHnGJ,SACJlJ,EACAgH,GAEA,IACImC,EADAC,EAAmB,GAEjBC,EAA2B,GAejC,OAbArJ,EAAUnC,QAAQ,SAACmI,EAAKlI,GAClBkI,EAAI/J,YAAcmN,IACpBD,EAAYG,EAAA,GACNtC,EAAWhB,EAAI/J,YAhHlB,CACLA,UAAW,CACTsE,IA8GoDyF,EAAI/J,UA7GxD6G,SAAU,GACVyG,KAAM,GACNC,QAAS,GACTC,YAAa,GACbC,EAAG,MACHC,KAAM,IAERnE,QAAS,IAsG4D,CACjExF,UAAW,KAEbqJ,EAAOrM,KAAKmM,GACZC,EAAmBpD,EAAI/J,WAEzB+J,EAAIlI,MAAQA,EACZqL,EAAanJ,UAAUhD,KAAKgJ,KAGvBqD,EG8EwBO,CAA0BrL,KAAKH,MAAM4B,UAAWgH,GAE7E,OACE3H,EAAA,yBACG6J,EAAqBxM,IAAI,SAAC+H,EAAc5H,GACvC,IAAIgN,EAAiB,GAQrB,OAPIxI,GAAaoD,EAAaxI,UAAUsE,MAAQc,EAAUpF,YACxD4N,EAAiB,CACf5J,aAAYA,EACZC,mBAAkBA,EAClBmB,UAAW,CAAEvD,MAAOuD,EAAUvD,MAAOF,KAAMyD,EAAUzD,KAAM2J,KAAMlG,EAAUkG,QAI7ElI,EAAA,cAACyK,EAAA,EAAoBC,SAAQ,CAC3BxJ,IAAQlC,EAAKD,MAAMpC,MAAMuE,IAAG,IAAIlC,EAAKD,MAAM4L,kBAAiB,IAAInN,EAChEoN,MAAO,CAAExJ,WAAYpC,EAAKD,MAAMqC,WAAYyJ,KAAMzF,EAAaxI,YAC/DoD,EAAA,cAAC8K,EAA4BhD,EAAA,CAC3B1G,WAAYpC,EAAKD,MAAMqC,WACvBM,2BAA4B1C,EAAKD,MAAM2C,2BACvC/E,MAAOqC,EAAKD,MAAMpC,MAClBkF,WAAY7C,EAAKiG,MAAMpD,WACvByB,aAAcsG,EAAkBxE,EAAaxI,UAAUsE,MAAQ,GAC/Da,KAAMvE,IAAMqM,EAAqB/L,OAAS,EAC1CmE,iBAAkBjD,EAAK6I,kBACvBlH,UAAWyE,EAAazE,WAAa,GACrCuB,cAAelD,EAAKD,MAAMmD,cAC1BC,mBAAoBnD,EAAKmJ,uBACzBzF,kBAAmB1D,EAAK2D,sBACxBC,iBAAkB5D,EAAKD,MAAM6D,iBAC7BO,uBAAwBnE,EAAKmE,uBAC7B9D,OAAQL,EAAKD,MAAMM,OACnB+F,aAAcA,GACVoF,SAQpB9C,EAzMA,CAA+D1H,EAAA","file":"js/373.1585038696837.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nconst LINES_ABOVE = 2;\nconst LINES_BELOW = 2;\nexport const MERGE_DISTANCE = 4; // Merge if snippets are four lines away (separated by 3 lines) or fewer\nexport const LINES_BELOW_LAST = 9;\nexport const EXPAND_BY_LINES = 10;\n\nfunction unknownComponent(key: string): T.SnippetsByComponent {\n  return {\n    component: {\n      key,\n      measures: {},\n      path: '',\n      project: '',\n      projectName: '',\n      q: 'FIL',\n      uuid: ''\n    },\n    sources: []\n  };\n}\n\nfunction collision([startA, endA]: number[], [startB, endB]: number[]) {\n  return !(startA > endB + MERGE_DISTANCE || endA < startB - MERGE_DISTANCE);\n}\n\nfunction getPrimaryLocation(issue: T.Issue): T.FlowLocation {\n  return {\n    component: issue.component,\n    textRange: issue.textRange || {\n      endLine: 0,\n      endOffset: 0,\n      startLine: 0,\n      startOffset: 0\n    }\n  };\n}\n\nexport function createSnippets(\n  locations: T.FlowLocation[],\n  componentLines: T.LineMap = {},\n  last: boolean,\n  issue?: T.Issue\n): T.SourceLine[][] {\n  return rangesToSnippets(\n    // For each location's range (2 above and 2 below), and then compare with other ranges\n    // to merge snippets that collide.\n    (issue ? [getPrimaryLocation(issue), ...locations] : locations).reduce(\n      (snippets: Array<{ start: number; end: number }>, loc, index) => {\n        const startIndex = Math.max(1, loc.textRange.startLine - LINES_ABOVE);\n        const endIndex =\n          loc.textRange.endLine +\n          ((issue && index === 0) || (last && index === locations.length - 1)\n            ? LINES_BELOW_LAST\n            : LINES_BELOW);\n\n        let firstCollision: { start: number; end: number } | undefined;\n\n        // Remove ranges that collide into the first collision\n        snippets = snippets.filter(snippet => {\n          if (collision([snippet.start, snippet.end], [startIndex, endIndex])) {\n            let keep = false;\n            // Check if we've already collided\n            if (!firstCollision) {\n              firstCollision = snippet;\n              keep = true;\n            }\n            // Merge with first collision:\n            firstCollision.start = Math.min(startIndex, snippet.start, firstCollision.start);\n            firstCollision.end = Math.max(endIndex, snippet.end, firstCollision.end);\n\n            // remove the range if it was not the first collision\n            return keep;\n          }\n          return true;\n        });\n\n        if (firstCollision === undefined) {\n          snippets.push({\n            start: startIndex,\n            end: endIndex\n          });\n        }\n\n        return snippets;\n      },\n      []\n    ),\n    componentLines\n  );\n}\n\nfunction rangesToSnippets(\n  ranges: Array<{ start: number; end: number }>,\n  componentLines: T.LineMap\n) {\n  return ranges\n    .map(range => {\n      const lines = [];\n      for (let i = range.start; i <= range.end; i++) {\n        if (componentLines[i]) {\n          lines.push(componentLines[i]);\n        }\n      }\n      return lines;\n    })\n    .filter(snippet => snippet.length > 0);\n}\n\nexport function groupLocationsByComponent(\n  locations: T.FlowLocation[],\n  components: { [key: string]: T.SnippetsByComponent }\n) {\n  let currentComponent = '';\n  let currentGroup: T.SnippetGroup;\n  const groups: T.SnippetGroup[] = [];\n\n  locations.forEach((loc, index) => {\n    if (loc.component !== currentComponent) {\n      currentGroup = {\n        ...(components[loc.component] || unknownComponent(loc.component)),\n        locations: []\n      };\n      groups.push(currentGroup);\n      currentComponent = loc.component;\n    }\n    loc.index = index;\n    currentGroup.locations.push(loc);\n  });\n\n  return groups;\n}\n\nexport function expandSnippet({\n  direction,\n  lines,\n  snippetIndex,\n  snippets\n}: {\n  direction: T.ExpandDirection;\n  lines: T.LineMap;\n  snippetIndex: number;\n  snippets: T.SourceLine[][];\n}) {\n  const snippetToExpand = snippets[snippetIndex];\n\n  const snippetToExpandRange = {\n    start: Math.max(0, snippetToExpand[0].line - (direction === 'up' ? EXPAND_BY_LINES : 0)),\n    end:\n      snippetToExpand[snippetToExpand.length - 1].line +\n      (direction === 'down' ? EXPAND_BY_LINES : 0)\n  };\n\n  const ranges: Array<{ start: number; end: number }> = [];\n\n  snippets.forEach((snippet, index: number) => {\n    const snippetRange = {\n      start: snippet[0].line,\n      end: snippet[snippet.length - 1].line\n    };\n\n    if (index === snippetIndex) {\n      // keep expanded snippet\n      ranges.push(snippetToExpandRange);\n    } else if (\n      collision(\n        [snippetRange.start, snippetRange.end],\n        [snippetToExpandRange.start, snippetToExpandRange.end]\n      )\n    ) {\n      // Merge with expanded snippet\n      snippetToExpandRange.start = Math.min(snippetRange.start, snippetToExpandRange.start);\n      snippetToExpandRange.end = Math.max(snippetRange.end, snippetToExpandRange.end);\n    } else {\n      // No collision, jsut keep the snippet\n      ranges.push(snippetRange);\n    }\n  });\n\n  return rangesToSnippets(ranges, lines);\n}\n\nexport function inSnippet(line: number, snippet: T.SourceLine[]) {\n  return line >= snippet[0].line && line <= snippet[snippet.length - 1].line;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { inSnippet, LINES_BELOW_LAST } from './utils';\nimport ExpandSnippetIcon from '../../../components/icons-components/ExpandSnippetIcon';\nimport Line from '../../../components/SourceViewer/components/Line';\nimport { symbolsByLine } from '../../../components/SourceViewer/helpers/indexing';\nimport { getSecondaryIssueLocationsForLine } from '../../../components/SourceViewer/helpers/issueLocations';\nimport {\n  optimizeLocationMessage,\n  optimizeHighlightedSymbols,\n  optimizeSelectedIssue\n} from '../../../components/SourceViewer/helpers/lines';\nimport { translate } from '../../../helpers/l10n';\nimport { scrollHorizontally } from '../../../helpers/scrolling';\n\ninterface Props {\n  branchLike: T.BranchLike | undefined;\n  component: T.SourceViewerFile;\n  duplications?: T.Duplication[];\n  duplicationsByLine?: { [line: number]: number[] };\n  expandBlock: (snippetIndex: number, direction: T.ExpandDirection) => void;\n  handleCloseIssues: (line: T.SourceLine) => void;\n  handleLinePopupToggle: (line: T.SourceLine) => void;\n  handleOpenIssues: (line: T.SourceLine) => void;\n  handleSymbolClick: (symbols: string[]) => void;\n  highlightedLocationMessage: { index: number; text: string | undefined } | undefined;\n  highlightedSymbols: string[];\n  index: number;\n  issue: T.Issue;\n  issuePopup?: { issue: string; name: string };\n  issuesByLine: T.IssuesByLine;\n  last: boolean;\n  linePopup?: T.LinePopup;\n  loadDuplications: (line: T.SourceLine) => void;\n  locations: T.FlowLocation[];\n  locationsByLine: { [line: number]: T.LinearIssueLocation[] };\n  onIssueChange: (issue: T.Issue) => void;\n  onIssuePopupToggle: (issue: string, popupName: string, open?: boolean) => void;\n  onLocationSelect: (index: number) => void;\n  openIssuesByLine: T.Dict<boolean>;\n  renderDuplicationPopup: (index: number, line: number) => React.ReactNode;\n  scroll?: (element: HTMLElement) => void;\n  snippet: T.SourceLine[];\n}\n\nconst SCROLL_LEFT_OFFSET = 32;\n\nexport default class SnippetViewer extends React.PureComponent<Props> {\n  node: React.RefObject<HTMLDivElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.node = React.createRef();\n  }\n\n  doScroll = (element: HTMLElement) => {\n    if (this.props.scroll) {\n      this.props.scroll(element);\n    }\n    const parent = this.node.current as Element;\n\n    if (parent) {\n      scrollHorizontally(element, {\n        leftOffset: SCROLL_LEFT_OFFSET,\n        rightOffset: parent.getBoundingClientRect().width - SCROLL_LEFT_OFFSET,\n        parent\n      });\n    }\n  };\n\n  expandBlock = (direction: T.ExpandDirection) => () =>\n    this.props.expandBlock(this.props.index, direction);\n\n  renderLine({\n    displayDuplications,\n    index,\n    issuesForLine,\n    issueLocations,\n    line,\n    snippet,\n    symbols,\n    verticalBuffer\n  }: {\n    displayDuplications: boolean;\n    index: number;\n    issuesForLine: T.Issue[];\n    issueLocations: T.LinearIssueLocation[];\n    line: T.SourceLine;\n    snippet: T.SourceLine[];\n    symbols: string[];\n    verticalBuffer: number;\n  }) {\n    const secondaryIssueLocations = getSecondaryIssueLocationsForLine(line, this.props.locations);\n\n    const { duplications, duplicationsByLine } = this.props;\n    const duplicationsCount = duplications ? duplications.length : 0;\n    const lineDuplications =\n      (duplicationsCount && duplicationsByLine && duplicationsByLine[line.line]) || [];\n\n    const isSinkLine = issuesForLine.some(i => i.key === this.props.issue.key);\n\n    return (\n      <Line\n        branchLike={this.props.branchLike}\n        displayAllIssues={false}\n        displayCoverage={true}\n        displayDuplications={displayDuplications}\n        displayIssues={!isSinkLine || issuesForLine.length > 1}\n        displayLocationMarkers={true}\n        duplications={lineDuplications}\n        duplicationsCount={duplicationsCount}\n        highlighted={false}\n        highlightedLocationMessage={optimizeLocationMessage(\n          this.props.highlightedLocationMessage,\n          secondaryIssueLocations\n        )}\n        highlightedSymbols={optimizeHighlightedSymbols(symbols, this.props.highlightedSymbols)}\n        issueLocations={issueLocations}\n        issuePopup={this.props.issuePopup}\n        issues={issuesForLine}\n        key={line.line}\n        last={false}\n        line={line}\n        linePopup={this.props.linePopup}\n        loadDuplications={this.props.loadDuplications}\n        onIssueChange={this.props.onIssueChange}\n        onIssuePopupToggle={this.props.onIssuePopupToggle}\n        onIssueSelect={() => {}}\n        onIssueUnselect={() => {}}\n        onIssuesClose={this.props.handleCloseIssues}\n        onIssuesOpen={this.props.handleOpenIssues}\n        onLinePopupToggle={this.props.handleLinePopupToggle}\n        onLocationSelect={this.props.onLocationSelect}\n        onSymbolClick={this.props.handleSymbolClick}\n        openIssues={this.props.openIssuesByLine[line.line]}\n        previousLine={index > 0 ? snippet[index - 1] : undefined}\n        renderDuplicationPopup={this.props.renderDuplicationPopup}\n        scroll={this.doScroll}\n        secondaryIssueLocations={secondaryIssueLocations}\n        selectedIssue={optimizeSelectedIssue(this.props.issue.key, issuesForLine)}\n        verticalBuffer={verticalBuffer}\n      />\n    );\n  }\n\n  render() {\n    const {\n      component,\n      issue,\n      issuesByLine = {},\n      last,\n      locationsByLine,\n      openIssuesByLine,\n      snippet\n    } = this.props;\n    const lastLine =\n      component.measures && component.measures.lines && parseInt(component.measures.lines, 10);\n\n    const symbols = symbolsByLine(snippet);\n\n    const bottomLine = snippet[snippet.length - 1].line;\n    const issueLine = issue.textRange ? issue.textRange.endLine : issue.line;\n    const lowestVisibleIssue = Math.max(\n      ...Object.keys(issuesByLine)\n        .map(k => parseInt(k, 10))\n        .filter(l => inSnippet(l, snippet) && (l === issueLine || openIssuesByLine[l]))\n    );\n    const verticalBuffer = last\n      ? Math.max(0, LINES_BELOW_LAST - (bottomLine - lowestVisibleIssue))\n      : 0;\n\n    const displayDuplications = snippet.some(s => !!s.duplicated);\n\n    return (\n      <div className=\"source-viewer-code snippet\" ref={this.node}>\n        <table className=\"source-table\">\n          <tbody>\n            {snippet[0].line > 1 && (\n              <tr className=\"expand-block expand-block-above\">\n                <td colSpan={5}>\n                  <button\n                    aria-label={translate('source_viewer.expand_above')}\n                    onClick={this.expandBlock('up')}\n                    type=\"button\">\n                    <ExpandSnippetIcon />\n                  </button>\n                </td>\n              </tr>\n            )}\n            {snippet.map((line, index) =>\n              this.renderLine({\n                displayDuplications,\n                index,\n                issuesForLine: issuesByLine[line.line] || [],\n                issueLocations: locationsByLine[line.line] || [],\n                line,\n                snippet,\n                symbols: symbols[line.line],\n                verticalBuffer: index === snippet.length - 1 ? verticalBuffer : 0\n              })\n            )}\n            {(!lastLine || snippet[snippet.length - 1].line < lastLine) && (\n              <tr className=\"expand-block expand-block-below\">\n                <td colSpan={5}>\n                  <button\n                    aria-label={translate('source_viewer.expand_below')}\n                    onClick={this.expandBlock('down')}\n                    type=\"button\">\n                    <ExpandSnippetIcon />\n                  </button>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { createSnippets, expandSnippet, EXPAND_BY_LINES, MERGE_DISTANCE } from './utils';\nimport SnippetViewer from './SnippetViewer';\nimport { getSources } from '../../../api/components';\nimport getCoverageStatus from '../../../components/SourceViewer/helpers/getCoverageStatus';\nimport { locationsByLine } from '../../../components/SourceViewer/helpers/indexing';\nimport SourceViewerHeaderSlim from '../../../components/SourceViewer/SourceViewerHeaderSlim';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\n\ninterface Props {\n  branchLike: T.BranchLike | undefined;\n  duplications?: T.Duplication[];\n  duplicationsByLine?: { [line: number]: number[] };\n  highlightedLocationMessage: { index: number; text: string | undefined } | undefined;\n  issue: T.Issue;\n  issuePopup?: { issue: string; name: string };\n  issuesByLine: T.IssuesByLine;\n  last: boolean;\n  linePopup?: T.LinePopup;\n  loadDuplications: (component: string, line: T.SourceLine) => void;\n  locations: T.FlowLocation[];\n  onIssueChange: (issue: T.Issue) => void;\n  onIssuePopupToggle: (issue: string, popupName: string, open?: boolean) => void;\n  onLinePopupToggle: (linePopup: T.LinePopup & { component: string }) => void;\n  onLocationSelect: (index: number) => void;\n  renderDuplicationPopup: (\n    component: T.SourceViewerFile,\n    index: number,\n    line: number\n  ) => React.ReactNode;\n  scroll?: (element: HTMLElement) => void;\n  snippetGroup: T.SnippetGroup;\n}\n\ninterface State {\n  additionalLines: { [line: number]: T.SourceLine };\n  highlightedSymbols: string[];\n  loading: boolean;\n  openIssuesByLine: T.Dict<boolean>;\n  snippets: T.SourceLine[][];\n}\n\nexport default class ComponentSourceSnippetViewer extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    additionalLines: {},\n    highlightedSymbols: [],\n    loading: false,\n    openIssuesByLine: {},\n    snippets: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.createSnippetsFromProps();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  createSnippetsFromProps() {\n    const snippets = createSnippets(\n      this.props.snippetGroup.locations,\n      this.props.snippetGroup.sources,\n      this.props.last,\n      this.props.issue.secondaryLocations.length > 0 ? this.props.issue : undefined\n    );\n    this.setState({ snippets });\n  }\n\n  expandBlock = (snippetIndex: number, direction: T.ExpandDirection) => {\n    const { branchLike, snippetGroup } = this.props;\n    const { key } = snippetGroup.component;\n    const { snippets } = this.state;\n\n    const snippet = snippets[snippetIndex];\n\n    // Extend by EXPAND_BY_LINES and add buffer for merging snippets\n    const extension = EXPAND_BY_LINES + MERGE_DISTANCE - 1;\n\n    const range =\n      direction === 'up'\n        ? {\n            from: Math.max(1, snippet[0].line - extension),\n            to: snippet[0].line - 1\n          }\n        : {\n            from: snippet[snippet.length - 1].line + 1,\n            to: snippet[snippet.length - 1].line + extension\n          };\n\n    getSources({\n      key,\n      ...range,\n      ...getBranchLikeQuery(branchLike)\n    })\n      .then(lines =>\n        lines.reduce((lineMap: T.Dict<T.SourceLine>, line) => {\n          line.coverageStatus = getCoverageStatus(line);\n          lineMap[line.line] = line;\n          return lineMap;\n        }, {})\n      )\n      .then(\n        newLinesMapped => {\n          if (this.mounted) {\n            this.setState(({ additionalLines, snippets }) => {\n              const combinedLines = { ...additionalLines, ...newLinesMapped };\n\n              return {\n                additionalLines: combinedLines,\n                snippets: expandSnippet({\n                  direction,\n                  lines: { ...combinedLines, ...this.props.snippetGroup.sources },\n                  snippetIndex,\n                  snippets\n                })\n              };\n            });\n          }\n        },\n        () => {}\n      );\n  };\n\n  expandComponent = () => {\n    const { branchLike, snippetGroup } = this.props;\n    const { key } = snippetGroup.component;\n\n    this.setState({ loading: true });\n\n    getSources({ key, ...getBranchLikeQuery(branchLike) }).then(\n      lines => {\n        if (this.mounted) {\n          this.setState({ loading: false, snippets: [lines] });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleLinePopupToggle = (linePopup: T.LinePopup) => {\n    this.props.onLinePopupToggle({\n      ...linePopup,\n      component: this.props.snippetGroup.component.key\n    });\n  };\n\n  handleOpenIssues = (line: T.SourceLine) => {\n    this.setState(state => ({\n      openIssuesByLine: { ...state.openIssuesByLine, [line.line]: true }\n    }));\n  };\n\n  handleCloseIssues = (line: T.SourceLine) => {\n    this.setState(state => ({\n      openIssuesByLine: { ...state.openIssuesByLine, [line.line]: false }\n    }));\n  };\n\n  handleSymbolClick = (highlightedSymbols: string[]) => {\n    this.setState({ highlightedSymbols });\n  };\n\n  loadDuplications = (line: T.SourceLine) => {\n    this.props.loadDuplications(this.props.snippetGroup.component.key, line);\n  };\n\n  renderDuplicationPopup = (index: number, line: number) => {\n    return this.props.renderDuplicationPopup(this.props.snippetGroup.component, index, line);\n  };\n\n  renderSnippet({\n    index,\n    issuesByLine,\n    last,\n    locationsByLine,\n    snippet\n  }: {\n    index: number;\n    issuesByLine: T.IssuesByLine;\n    last: boolean;\n    locationsByLine: { [line: number]: T.LinearIssueLocation[] };\n    snippet: T.SourceLine[];\n  }) {\n    return (\n      <SnippetViewer\n        branchLike={this.props.branchLike}\n        component={this.props.snippetGroup.component}\n        expandBlock={this.expandBlock}\n        handleCloseIssues={this.handleCloseIssues}\n        handleLinePopupToggle={this.handleLinePopupToggle}\n        handleOpenIssues={this.handleOpenIssues}\n        handleSymbolClick={this.handleSymbolClick}\n        highlightedLocationMessage={this.props.highlightedLocationMessage}\n        highlightedSymbols={this.state.highlightedSymbols}\n        index={index}\n        issue={this.props.issue}\n        issuePopup={this.props.issuePopup}\n        issuesByLine={issuesByLine}\n        key={index}\n        last={last}\n        loadDuplications={this.loadDuplications}\n        locations={this.props.locations}\n        locationsByLine={locationsByLine}\n        onIssueChange={this.props.onIssueChange}\n        onIssuePopupToggle={this.props.onIssuePopupToggle}\n        onLocationSelect={this.props.onLocationSelect}\n        openIssuesByLine={this.state.openIssuesByLine}\n        renderDuplicationPopup={this.renderDuplicationPopup}\n        scroll={this.props.scroll}\n        snippet={snippet}\n      />\n    );\n  }\n\n  render() {\n    const { branchLike, duplications, issue, issuesByLine, last, snippetGroup } = this.props;\n    const { loading, snippets } = this.state;\n    const locations = locationsByLine([issue]);\n\n    const fullyShown =\n      snippets.length === 1 &&\n      snippetGroup.component.measures &&\n      snippets[0].length === parseInt(snippetGroup.component.measures.lines || '', 10);\n\n    return (\n      <div\n        className={classNames('component-source-container', {\n          'source-duplications-expanded': duplications && duplications.length > 0\n        })}>\n        <SourceViewerHeaderSlim\n          branchLike={branchLike}\n          expandable={!fullyShown}\n          loading={loading}\n          onExpand={this.expandComponent}\n          sourceViewerFile={snippetGroup.component}\n        />\n        {snippets.map((snippet, index) =>\n          this.renderSnippet({\n            snippet,\n            index,\n            issuesByLine: last ? issuesByLine : {},\n            locationsByLine: last && index === snippets.length - 1 ? locations : {},\n            last: last && index === snippets.length - 1\n          })\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ComponentSourceSnippetViewer from './ComponentSourceSnippetViewer';\nimport { groupLocationsByComponent } from './utils';\nimport DeferredSpinner from '../../../components/common/DeferredSpinner';\nimport DuplicationPopup from '../../../components/SourceViewer/components/DuplicationPopup';\nimport { SourceViewerContext } from '../../../components/SourceViewer/SourceViewerContext';\nimport { Alert } from '../../../components/ui/Alert';\nimport { WorkspaceContext } from '../../../components/workspace/context';\nimport { getIssueFlowSnippets } from '../../../api/issues';\nimport throwGlobalError from '../../../app/utils/throwGlobalError';\nimport {\n  filterDuplicationBlocksByLine,\n  getDuplicationBlocksForIndex,\n  isDuplicationBlockInRemovedComponent\n} from '../../../components/SourceViewer/helpers/duplications';\nimport {\n  duplicationsByLine,\n  issuesByComponentAndLine\n} from '../../../components/SourceViewer/helpers/indexing';\nimport { getDuplications } from '../../../api/components';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\nimport { translate } from '../../../helpers/l10n';\n\ninterface Props {\n  branchLike: T.Branch | T.PullRequest | undefined;\n  highlightedLocationMessage?: { index: number; text: string | undefined };\n  issue: T.Issue;\n  issues: T.Issue[];\n  locations: T.FlowLocation[];\n  onIssueChange: (issue: T.Issue) => void;\n  onLoaded?: () => void;\n  onLocationSelect: (index: number) => void;\n  scroll?: (element: HTMLElement) => void;\n  selectedFlowIndex: number | undefined;\n}\n\ninterface State {\n  components: T.Dict<T.SnippetsByComponent>;\n  duplicatedFiles?: T.Dict<T.DuplicatedFile>;\n  duplications?: T.Duplication[];\n  duplicationsByLine: { [line: number]: number[] };\n  issuePopup?: { issue: string; name: string };\n  linePopup?: T.LinePopup & { component: string };\n  loading: boolean;\n  notAccessible: boolean;\n}\n\nexport default class CrossComponentSourceViewerWrapper extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    components: {},\n    duplicationsByLine: {},\n    loading: true,\n    notAccessible: false\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchIssueFlowSnippets(this.props.issue.key);\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    if (newProps.issue.key !== this.props.issue.key) {\n      this.fetchIssueFlowSnippets(newProps.issue.key);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchDuplications = (component: string, line: T.SourceLine) => {\n    getDuplications({\n      key: component,\n      ...getBranchLikeQuery(this.props.branchLike)\n    }).then(\n      r => {\n        if (this.mounted) {\n          this.setState(state => ({\n            duplicatedFiles: r.files,\n            duplications: r.duplications,\n            duplicationsByLine: duplicationsByLine(r.duplications),\n            linePopup:\n              r.duplications.length === 1\n                ? { component, index: 0, line: line.line, name: 'duplications' }\n                : state.linePopup\n          }));\n        }\n      },\n      () => {}\n    );\n  };\n\n  fetchIssueFlowSnippets(issueKey: string) {\n    this.setState({ loading: true });\n    getIssueFlowSnippets(issueKey).then(\n      components => {\n        if (this.mounted) {\n          this.setState({\n            components,\n            issuePopup: undefined,\n            linePopup: undefined,\n            loading: false\n          });\n          if (this.props.onLoaded) {\n            this.props.onLoaded();\n          }\n        }\n      },\n      ({ response }: { response: Response }) => {\n        if (response.status !== 403) {\n          throwGlobalError({ response });\n        }\n        if (this.mounted) {\n          this.setState({ loading: false, notAccessible: response.status === 403 });\n        }\n      }\n    );\n  }\n\n  handleIssuePopupToggle = (issue: string, popupName: string, open?: boolean) => {\n    this.setState((state: State) => {\n      const samePopup =\n        state.issuePopup && state.issuePopup.name === popupName && state.issuePopup.issue === issue;\n      if (open !== false && !samePopup) {\n        return { issuePopup: { issue, name: popupName } };\n      } else if (open !== true && samePopup) {\n        return { issuePopup: undefined };\n      }\n      return null;\n    });\n  };\n\n  handleLinePopupToggle = ({\n    component,\n    index,\n    line,\n    name,\n    open\n  }: T.LinePopup & { component: string }) => {\n    this.setState((state: State) => {\n      const samePopup =\n        state.linePopup !== undefined &&\n        state.linePopup.line === line &&\n        state.linePopup.name === name &&\n        state.linePopup.component === component &&\n        state.linePopup.index === index;\n      if (open !== false && !samePopup) {\n        return { linePopup: { component, index, line, name } };\n      } else if (open !== true && samePopup) {\n        return { linePopup: undefined };\n      }\n      return null;\n    });\n  };\n\n  handleCloseLinePopup = () => {\n    this.setState({ linePopup: undefined });\n  };\n\n  renderDuplicationPopup = (component: T.SourceViewerFile, index: number, line: number) => {\n    const { duplicatedFiles, duplications } = this.state;\n\n    if (!component || !duplicatedFiles) {\n      return null;\n    }\n\n    const blocks = getDuplicationBlocksForIndex(duplications, index);\n\n    return (\n      <WorkspaceContext.Consumer>\n        {({ openComponent }) => (\n          <DuplicationPopup\n            blocks={filterDuplicationBlocksByLine(blocks, line)}\n            branchLike={this.props.branchLike}\n            duplicatedFiles={duplicatedFiles}\n            inRemovedComponent={isDuplicationBlockInRemovedComponent(blocks)}\n            onClose={this.handleCloseLinePopup}\n            openComponent={openComponent}\n            sourceViewerFile={component}\n          />\n        )}\n      </WorkspaceContext.Consumer>\n    );\n  };\n\n  render() {\n    const { loading, notAccessible } = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <DeferredSpinner />\n        </div>\n      );\n    }\n\n    if (notAccessible) {\n      return (\n        <Alert className=\"spacer-top\" variant=\"warning\">\n          {translate('code_viewer.no_source_code_displayed_due_to_security')}\n        </Alert>\n      );\n    }\n\n    const { components, duplications, duplicationsByLine, linePopup } = this.state;\n    const issuesByComponent = issuesByComponentAndLine(this.props.issues);\n    const locationsByComponent = groupLocationsByComponent(this.props.locations, components);\n\n    return (\n      <div>\n        {locationsByComponent.map((snippetGroup, i) => {\n          let componentProps = {};\n          if (linePopup && snippetGroup.component.key === linePopup.component) {\n            componentProps = {\n              duplications,\n              duplicationsByLine,\n              linePopup: { index: linePopup.index, line: linePopup.line, name: linePopup.name }\n            };\n          }\n          return (\n            <SourceViewerContext.Provider\n              key={`${this.props.issue.key}-${this.props.selectedFlowIndex}-${i}`}\n              value={{ branchLike: this.props.branchLike, file: snippetGroup.component }}>\n              <ComponentSourceSnippetViewer\n                branchLike={this.props.branchLike}\n                highlightedLocationMessage={this.props.highlightedLocationMessage}\n                issue={this.props.issue}\n                issuePopup={this.state.issuePopup}\n                issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}\n                last={i === locationsByComponent.length - 1}\n                loadDuplications={this.fetchDuplications}\n                locations={snippetGroup.locations || []}\n                onIssueChange={this.props.onIssueChange}\n                onIssuePopupToggle={this.handleIssuePopupToggle}\n                onLinePopupToggle={this.handleLinePopupToggle}\n                onLocationSelect={this.props.onLocationSelect}\n                renderDuplicationPopup={this.renderDuplicationPopup}\n                scroll={this.props.scroll}\n                snippetGroup={snippetGroup}\n                {...componentProps}\n              />\n            </SourceViewerContext.Provider>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}