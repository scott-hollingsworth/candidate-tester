{"version":3,"sources":["webpack:///./src/main/js/api/quality-gates.ts","webpack:///./src/main/js/apps/projectQualityGate/Header.tsx","webpack:///./src/main/js/apps/projectQualityGate/Form.tsx","webpack:///./src/main/js/apps/projectQualityGate/App.tsx"],"names":["fetchQualityGates","data","Object","_helpers_request__WEBPACK_IMPORTED_MODULE_0__","catch","_app_utils_throwGlobalError__WEBPACK_IMPORTED_MODULE_1__","fetchQualityGate","createQualityGate","deleteQualityGate","renameQualityGate","copyQualityGate","setQualityGateAsDefault","createCondition","updateCondition","deleteCondition","getGateForProject","then","_a","qualityGate","__assign","isDefault","default","searchGates","associateGateWithProject","dissociateGateWithProject","getApplicationQualityGate","Header_Header","index_js_exposed","className","l10n","_super","Form","_this","apply","this","arguments","mounted","state","loading","stopLoading","setState","handleChange","option","gate","props","isSet","value","isUnset","isChanged","id","Number","onChange","renderGateName","label","Form_extends","prototype","componentDidMount","componentWillUnmount","renderSelect","options","allGates","map","String","name","Select","clearable","disabled","optionRenderer","style","width","valueRenderer","render","App_App","App","handleChangeGate","oldId","newId","Promise","resolve","component","requestData","gateId","organization","projectKey","key","quality_gates","addGlobalSuccessMessage","newGate","find","onComponentChange","undefined","App_extends","checkPermissions","handleRequiredAuthorization","configuration","showQualityGates","all","project","qualitygates","Helmet_default","a","title","projectQualityGate_Form"],"mappings":"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","file":"js/275.df5b98d4.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from '../helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Metric } from '../app/types';\n\nexport interface ConditionBase {\n  error: string;\n  metric: string;\n  op?: string;\n  period?: number;\n  warning: string;\n}\n\nexport interface Condition extends ConditionBase {\n  id: number;\n}\n\nexport interface QualityGate {\n  actions?: {\n    associateProjects: boolean;\n    copy: boolean;\n    delete: boolean;\n    manageConditions: boolean;\n    rename: boolean;\n    setAsDefault: boolean;\n  };\n  conditions?: Condition[];\n  id: number;\n  isBuiltIn?: boolean;\n  isDefault?: boolean;\n  name: string;\n}\n\nexport function fetchQualityGates(data: {\n  organization?: string;\n}): Promise<{\n  actions: { create: boolean };\n  qualitygates: QualityGate[];\n}> {\n  return getJSON('/api/qualitygates/list', data).catch(throwGlobalError);\n}\n\nexport function fetchQualityGate(data: {\n  id: number;\n  organization?: string;\n}): Promise<QualityGate> {\n  return getJSON('/api/qualitygates/show', data).catch(throwGlobalError);\n}\n\nexport function createQualityGate(data: {\n  name: string;\n  organization?: string;\n}): Promise<QualityGate> {\n  return postJSON('/api/qualitygates/create', data).catch(throwGlobalError);\n}\n\nexport function deleteQualityGate(data: {\n  id: number;\n  organization?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/destroy', data).catch(throwGlobalError);\n}\n\nexport function renameQualityGate(data: {\n  id: number;\n  name: string;\n  organization?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/rename', data).catch(throwGlobalError);\n}\n\nexport function copyQualityGate(data: {\n  id: number;\n  name: string;\n  organization?: string;\n}): Promise<QualityGate> {\n  return postJSON('/api/qualitygates/copy', data).catch(throwGlobalError);\n}\n\nexport function setQualityGateAsDefault(data: {\n  id: number;\n  organization?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/set_as_default', data).catch(throwGlobalError);\n}\n\nexport function createCondition(\n  data: {\n    gateId: number;\n    organization?: string;\n  } & ConditionBase\n): Promise<Condition> {\n  return postJSON('/api/qualitygates/create_condition', data);\n}\n\nexport function updateCondition(data: { organization?: string } & Condition): Promise<Condition> {\n  return postJSON('/api/qualitygates/update_condition', data);\n}\n\nexport function deleteCondition(data: { id: number; organization?: string }): Promise<void> {\n  return post('/api/qualitygates/delete_condition', data);\n}\n\nexport function getGateForProject(data: {\n  organization?: string;\n  project: string;\n}): Promise<QualityGate | undefined> {\n  return getJSON('/api/qualitygates/get_by_project', data).then(\n    ({ qualityGate }) =>\n      qualityGate && {\n        ...qualityGate,\n        isDefault: qualityGate.default\n      },\n    throwGlobalError\n  );\n}\n\nexport function searchGates(data: {\n  gateId: number;\n  organization?: string;\n  page: number;\n  pageSize: number;\n  selected: string;\n}): Promise<void | Response> {\n  return getJSON('/api/qualitygates/search', data).catch(throwGlobalError);\n}\n\nexport function associateGateWithProject(data: {\n  gateId: number;\n  organization?: string;\n  projectKey?: string;\n  projectId?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/select', data).catch(throwGlobalError);\n}\n\nexport function dissociateGateWithProject(data: {\n  gateId: number;\n  organization?: string;\n  projectKey?: string;\n  projectId?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/deselect', data).catch(throwGlobalError);\n}\n\nexport interface ConditionAnalysis {\n  comparator: string;\n  errorThreshold?: string;\n  metric: string;\n  periodIndex?: number;\n  onLeak?: boolean;\n  status: string;\n  value: string;\n  warningThreshold?: string;\n}\n\nexport interface ApplicationProject {\n  key: string;\n  name: string;\n  status: string;\n  conditions: ConditionAnalysis[];\n}\n\nexport interface ApplicationQualityGate {\n  metrics: Metric[];\n  projects: ApplicationProject[];\n  status: string;\n}\n\nexport function getApplicationQualityGate(data: {\n  application: string;\n  organization?: string;\n}): Promise<ApplicationQualityGate> {\n  return getJSON('/api/qualitygates/application_status', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from '../../helpers/l10n';\n\nexport default function Header() {\n  return (\n    <header className=\"page-header\">\n      <h1 className=\"page-title\">{translate('project_quality_gate.page')}</h1>\n      <div className=\"page-description\">{translate('project_quality_gate.page.description')}</div>\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { QualityGate } from '../../api/quality-gates';\nimport Select from '../../components/controls/Select';\nimport { translate } from '../../helpers/l10n';\n\ninterface Props {\n  allGates: QualityGate[];\n  gate?: QualityGate;\n  onChange: (oldGate?: number, newGate?: number) => Promise<void>;\n}\n\ninterface State {\n  loading: boolean;\n}\n\ninterface Option {\n  isDefault?: boolean;\n  label: string;\n  value: string;\n}\n\nexport default class Form extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  stopLoading = () => {\n    if (this.mounted) {\n      this.setState({ loading: false });\n    }\n  };\n\n  handleChange = (option: { value: string }) => {\n    const { gate } = this.props;\n\n    const isSet = gate == null && option.value != null;\n    const isUnset = gate != null && option.value == null;\n    const isChanged = gate != null && gate.id !== Number(option.value);\n    const hasChanged = isSet || isUnset || isChanged;\n\n    if (hasChanged) {\n      this.setState({ loading: true });\n      this.props\n        .onChange(gate && gate.id, Number(option.value))\n        .then(this.stopLoading, this.stopLoading);\n    }\n  };\n\n  renderGateName = (option: { isDefault?: boolean; label: string }) => {\n    if (option.isDefault) {\n      return (\n        <span>\n          <strong>{translate('default')}</strong>\n          {': '}\n          {option.label}\n        </span>\n      );\n    }\n\n    return <span>{option.label}</span>;\n  };\n\n  renderSelect() {\n    const { gate, allGates } = this.props;\n\n    const options: Option[] = allGates.map(gate => ({\n      value: String(gate.id),\n      label: gate.name,\n      isDefault: gate.isDefault\n    }));\n\n    return (\n      <Select\n        clearable={false}\n        disabled={this.state.loading}\n        onChange={this.handleChange}\n        optionRenderer={this.renderGateName}\n        options={options}\n        style={{ width: 300 }}\n        value={gate && String(gate.id)}\n        valueRenderer={this.renderGateName}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderSelect()}\n        {this.state.loading && <i className=\"spinner spacer-left\" />}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport Header from './Header';\nimport Form from './Form';\nimport {\n  fetchQualityGates,\n  getGateForProject,\n  associateGateWithProject,\n  dissociateGateWithProject,\n  QualityGate\n} from '../../api/quality-gates';\nimport addGlobalSuccessMessage from '../../app/utils/addGlobalSuccessMessage';\nimport handleRequiredAuthorization from '../../app/utils/handleRequiredAuthorization';\nimport { Component } from '../../app/types';\nimport { translate } from '../../helpers/l10n';\n\ninterface Props {\n  component: Component;\n  onComponentChange: (changes: {}) => void;\n}\n\ninterface State {\n  allGates?: QualityGate[];\n  gate?: QualityGate;\n  loading: boolean;\n}\n\nexport default class App extends React.PureComponent<Props> {\n  mounted = false;\n  state: State = { loading: true };\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.checkPermissions()) {\n      this.fetchQualityGates();\n    } else {\n      handleRequiredAuthorization();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkPermissions() {\n    const { configuration } = this.props.component;\n    const hasPermission = configuration && configuration.showQualityGates;\n    return !!hasPermission;\n  }\n\n  fetchQualityGates() {\n    const { component } = this.props;\n    this.setState({ loading: true });\n    Promise.all([\n      fetchQualityGates({ organization: component.organization }),\n      getGateForProject({ organization: component.organization, project: component.key })\n    ]).then(\n      ([{ qualitygates: allGates }, gate]) => {\n        if (this.mounted) {\n          this.setState({ allGates, gate, loading: false });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  }\n\n  handleChangeGate = (oldId?: number, newId?: number) => {\n    const { allGates } = this.state;\n    if ((!oldId && !newId) || !allGates) {\n      return Promise.resolve();\n    }\n\n    const { component } = this.props;\n    const requestData = {\n      gateId: newId ? newId : oldId!,\n      organization: component.organization,\n      projectKey: component.key\n    };\n    const request = newId\n      ? associateGateWithProject(requestData)\n      : dissociateGateWithProject(requestData);\n\n    return request.then(() => {\n      if (this.mounted) {\n        addGlobalSuccessMessage(translate('project_quality_gate.successfully_updated'));\n        if (newId) {\n          const newGate = allGates.find(gate => gate.id === newId);\n          if (newGate) {\n            this.setState({ gate: newGate });\n            this.props.onComponentChange({ qualityGate: newGate });\n          }\n        } else {\n          this.setState({ gate: undefined });\n        }\n      }\n    });\n  };\n\n  render() {\n    if (!this.checkPermissions()) {\n      return null;\n    }\n\n    const { allGates, gate, loading } = this.state;\n\n    return (\n      <div id=\"project-quality-gate\" className=\"page page-limited\">\n        <Helmet title={translate('project_quality_gate.page')} />\n        <Header />\n        {loading ? (\n          <i className=\"spinner\" />\n        ) : (\n          allGates && <Form allGates={allGates} gate={gate} onChange={this.handleChangeGate} />\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}