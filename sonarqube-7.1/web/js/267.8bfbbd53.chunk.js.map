{"version":3,"sources":["webpack:///./src/main/js/api/measures.ts","webpack:///./src/main/js/apps/custom-measures/components/Form.tsx","webpack:///./src/main/js/apps/custom-measures/components/CreateButton.tsx","webpack:///./src/main/js/apps/custom-measures/components/Header.tsx","webpack:///./src/main/js/apps/custom-measures/components/DeleteButton.tsx","webpack:///./src/main/js/apps/custom-measures/components/EditButton.tsx","webpack:///./src/main/js/apps/custom-measures/components/List.tsx","webpack:///./src/main/js/apps/custom-measures/components/App.tsx"],"names":["getMeasures","data","Object","_helpers_request__WEBPACK_IMPORTED_MODULE_0__","then","r","component","measures","_app_utils_throwGlobalError__WEBPACK_IMPORTED_MODULE_1__","getMeasuresAndMeta","componentKey","metrics","additional","__assign","metricKeys","join","getMeasuresForProjects","projectKeys","getCustomMeasures","customMeasures","paging","pageIndex","p","pageSize","ps","total","createCustomMeasure","catch","updateCustomMeasure","deleteCustomMeasure","_super","Form","props","_this","call","this","mounted","handleSubmit","state","metricKey","onSubmit","description","value","onClose","Promise","reject","undefined","fetchCustomMetrics","setState","loading","api_metrics","isCustom","handleMetricSelect","_a","handleDescriptionChange","event","currentTarget","handleValueChange","renderMetricSelect","options","length","index_js_exposed","className","htmlFor","l10n","Select","autofocus","clearable","onChange","measure","metric","key","Form_extends","prototype","componentDidMount","componentWillUnmount","render","skipMetrics","_b","filter","includes","map","label","name","forbidSubmitting","SimpleModal","header","onCloseClick","onFormSubmit","submitting","autoFocus","id","maxLength","required","type","DeferredSpinner","buttons","disabled","confirmButtonText","onClick","CreateButton","apply","arguments","modal","handleClick","handleClose","CreateButton_extends","components_Form","onCreate","Header_Header","components_CreateButton","DeleteButton_DeleteButton","onDelete","ConfirmButton","confirmData","isDestructive","modalBody","modalHeader","onConfirm","ActionsDropdown","destructive","EditButton","onEdit","EditButton_assign","EditButton_extends","List_List","lodash_js_exposed","toLowerCase","data-metric","pending","Tooltip","overlay","domain","helpers_measures","List_MeasureDate","user","components_EditButton","updatedAt","DateFormatter","date","createdAt","App_PAGE_SIZE","App_App","App","fetchMeasures","api_measures","projectKey","stopLoading","fetchMore","concat","handleCreate","App_assign","handleEdit","handleDelete","measureId","App_extends","Helmet_default","a","title","ListFooter","count","loadMore","ready"],"mappings":"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","file":"js/267.8bfbbd53.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, RequestData, postJSON, post } from '../helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Measure, MeasurePeriod } from '../helpers/measures';\nimport { Metric, CustomMeasure, Paging, BranchParameters } from '../app/types';\nimport { Period } from '../helpers/periods';\n\nexport function getMeasures(\n  data: { componentKey: string; metricKeys: string } & BranchParameters\n): Promise<{ metric: string; value?: string }[]> {\n  return getJSON('/api/measures/component', data).then(r => r.component.measures, throwGlobalError);\n}\n\nexport interface MeasureComponent {\n  key: string;\n  description?: string;\n  measures: Measure[];\n  name: string;\n  qualifier: string;\n}\n\nexport function getMeasuresAndMeta(\n  componentKey: string,\n  metrics: string[],\n  additional: RequestData = {}\n): Promise<{ component: MeasureComponent; metrics?: Metric[]; periods?: Period[] }> {\n  const data = { ...additional, componentKey, metricKeys: metrics.join(',') };\n  return getJSON('/api/measures/component', data);\n}\n\ninterface MeasuresForProjects {\n  component: string;\n  metric: string;\n  periods?: MeasurePeriod[];\n  value?: string;\n}\n\nexport function getMeasuresForProjects(\n  projectKeys: string[],\n  metricKeys: string[]\n): Promise<MeasuresForProjects[]> {\n  return getJSON('/api/measures/search', {\n    projectKeys: projectKeys.join(),\n    metricKeys: metricKeys.join()\n  }).then(r => r.measures);\n}\n\nexport function getCustomMeasures(data: {\n  f?: string;\n  p?: number;\n  projectKey: string;\n  ps?: number;\n}): Promise<{ customMeasures: CustomMeasure[]; paging: Paging }> {\n  return getJSON('/api/custom_measures/search', data).then(\n    r =>\n      ({\n        customMeasures: r.customMeasures,\n        paging: { pageIndex: r.p, pageSize: r.ps, total: r.total }\n      } as any),\n    throwGlobalError\n  );\n}\n\nexport function createCustomMeasure(data: {\n  description?: string;\n  metricKey: string;\n  projectKey: string;\n  value: string;\n}): Promise<CustomMeasure> {\n  return postJSON('/api/custom_measures/create', data).catch(throwGlobalError);\n}\n\nexport function updateCustomMeasure(data: { description?: string; id: string; value?: string }) {\n  return post('/api/custom_measures/update', data).catch(throwGlobalError);\n}\n\nexport function deleteCustomMeasure(data: { id: string }) {\n  return post('/api/custom_measures/delete', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { getAllMetrics } from '../../../api/metrics';\nimport { CustomMeasure, Metric } from '../../../app/types';\nimport DeferredSpinner from '../../../components/common/DeferredSpinner';\nimport Select from '../../../components/controls/Select';\nimport SimpleModal from '../../../components/controls/SimpleModal';\nimport { SubmitButton, ResetButtonLink } from '../../../components/ui/buttons';\nimport { translate } from '../../../helpers/l10n';\n\ninterface Props {\n  confirmButtonText: string;\n  header: string;\n  measure?: CustomMeasure;\n  onClose: () => void;\n  onSubmit: (data: { description: string; metricKey: string; value: string }) => Promise<void>;\n  skipMetrics?: string[];\n}\n\ninterface State {\n  description: string;\n  loading: boolean;\n  metricKey?: string;\n  metrics?: Metric[];\n  value: string;\n}\n\nexport default class Form extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      description: (props.measure && props.measure.description) || '',\n      loading: false,\n      metricKey: props.measure && props.measure.metric.key,\n      value: (props.measure && props.measure.value) || ''\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    if (!this.props.measure) {\n      this.fetchCustomMetrics();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = () => {\n    return this.state.metricKey\n      ? this.props\n          .onSubmit({\n            description: this.state.description,\n            metricKey: this.state.metricKey,\n            value: this.state.value\n          })\n          .then(this.props.onClose)\n      : Promise.reject(undefined);\n  };\n\n  fetchCustomMetrics = () => {\n    this.setState({ loading: true });\n    getAllMetrics({ isCustom: true }).then(\n      metrics => {\n        if (this.mounted) {\n          this.setState({ loading: false, metrics });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleMetricSelect = ({ value }: { value: string }) => {\n    this.setState({ metricKey: value });\n  };\n\n  handleDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ description: event.currentTarget.value });\n  };\n\n  handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ value: event.currentTarget.value });\n  };\n\n  renderMetricSelect = (options: { label: string; value: string }[]) => {\n    if (!options.length && !this.state.loading) {\n      return (\n        <div className=\"alert alert-warning\">{translate('custom_measures.all_metrics_taken')}</div>\n      );\n    }\n    return (\n      <div className=\"modal-field\">\n        <label htmlFor=\"create-custom-measure-metric\">\n          {translate('custom_measures.metric')}\n          <em className=\"mandatory\">*</em>\n        </label>\n        {this.state.loading ? (\n          <i className=\"spinner\" />\n        ) : (\n          <Select\n            autofocus={true}\n            clearable={false}\n            onChange={this.handleMetricSelect}\n            options={options}\n            value={this.state.metricKey}\n          />\n        )}\n      </div>\n    );\n  };\n\n  render() {\n    const { skipMetrics = [] } = this.props;\n    const { metrics = [] } = this.state;\n    const options = metrics\n      .filter(metric => !skipMetrics.includes(metric.key))\n      .map(metric => ({ label: metric.name, value: metric.key }));\n    const forbidSubmitting = !this.props.measure && !options.length;\n\n    return (\n      <SimpleModal\n        header={this.props.header}\n        onClose={this.props.onClose}\n        onSubmit={this.handleSubmit}>\n        {({ onCloseClick, onFormSubmit, submitting }) => (\n          <form onSubmit={onFormSubmit}>\n            <header className=\"modal-head\">\n              <h2>{this.props.header}</h2>\n            </header>\n\n            <div className=\"modal-body\">\n              {!this.props.measure && this.renderMetricSelect(options)}\n\n              <div className=\"modal-field\">\n                <label htmlFor=\"create-custom-measure-value\">\n                  {translate('value')}\n                  <em className=\"mandatory\">*</em>\n                </label>\n                <input\n                  autoFocus={this.props.measure !== undefined}\n                  id=\"create-custom-measure-value\"\n                  maxLength={200}\n                  name=\"value\"\n                  onChange={this.handleValueChange}\n                  required={true}\n                  type=\"text\"\n                  value={this.state.value}\n                />\n              </div>\n              <div className=\"modal-field\">\n                <label htmlFor=\"create-custom-measure-description\">\n                  {translate('description')}\n                </label>\n                <textarea\n                  id=\"create-custom-measure-description\"\n                  name=\"description\"\n                  onChange={this.handleDescriptionChange}\n                  value={this.state.description}\n                />\n              </div>\n            </div>\n\n            <footer className=\"modal-foot\">\n              <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n              <SubmitButton\n                disabled={forbidSubmitting || submitting}\n                id=\"create-custom-measure-submit\">\n                {this.props.confirmButtonText}\n              </SubmitButton>\n              <ResetButtonLink\n                disabled={submitting}\n                id=\"create-custom-measure-cancel\"\n                onClick={onCloseClick}>\n                {translate('cancel')}\n              </ResetButtonLink>\n            </footer>\n          </form>\n        )}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Form from './Form';\nimport { Button } from '../../../components/ui/buttons';\nimport { translate } from '../../../helpers/l10n';\n\ninterface Props {\n  onCreate: (data: { description: string; metricKey: string; value: string }) => Promise<void>;\n  skipMetrics: string[] | undefined;\n}\n\ninterface State {\n  modal: boolean;\n}\n\nexport default class CreateButton extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { modal: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleClick = () => {\n    this.setState({ modal: true });\n  };\n\n  handleClose = () => {\n    if (this.mounted) {\n      this.setState({ modal: false });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Button id=\"custom-measures-create\" onClick={this.handleClick}>\n          {translate('create')}\n        </Button>\n        {this.state.modal && (\n          <Form\n            confirmButtonText={translate('create')}\n            header={translate('custom_measures.create_custom_measure')}\n            onClose={this.handleClose}\n            onSubmit={this.props.onCreate}\n            skipMetrics={this.props.skipMetrics}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport CreateButton from './CreateButton';\nimport DeferredSpinner from '../../../components/common/DeferredSpinner';\nimport { translate } from '../../../helpers/l10n';\n\ninterface Props {\n  loading: boolean;\n  onCreate: (data: { description: string; metricKey: string; value: string }) => Promise<void>;\n  skipMetrics: string[] | undefined;\n}\n\nexport default function Header({ loading, onCreate, skipMetrics }: Props) {\n  return (\n    <header className=\"page-header\" id=\"custom-measures-header\">\n      <h1 className=\"page-title\">{translate('custom_measures.page')}</h1>\n      <DeferredSpinner loading={loading} />\n      <div className=\"page-actions\">\n        <CreateButton onCreate={onCreate} skipMetrics={skipMetrics} />\n      </div>\n      <p className=\"page-description\">{translate('custom_measures.page.description')}</p>\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { CustomMeasure } from '../../../app/types';\nimport ConfirmButton from '../../../components/controls/ConfirmButton';\nimport { ActionsDropdownItem } from '../../../components/controls/ActionsDropdown';\nimport { translate, translateWithParameters } from '../../../helpers/l10n';\n\ninterface Props {\n  measure: CustomMeasure;\n  onDelete: (measureId: string) => Promise<void>;\n}\n\nexport default function DeleteButton({ measure, onDelete }: Props) {\n  return (\n    <ConfirmButton\n      confirmButtonText={translate('delete')}\n      confirmData={measure.id}\n      isDestructive={true}\n      modalBody={translateWithParameters(\n        'custom_measures.delete_custom_measure.confirmation',\n        measure.metric.name\n      )}\n      modalHeader={translate('custom_measures.delete_custom_measure')}\n      onConfirm={onDelete}>\n      {({ onClick }) => (\n        <ActionsDropdownItem\n          className=\"js-custom-measure-delete\"\n          destructive={true}\n          onClick={onClick}>\n          {translate('delete')}\n        </ActionsDropdownItem>\n      )}\n    </ConfirmButton>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Form from './Form';\nimport { CustomMeasure } from '../../../app/types';\nimport { translate } from '../../../helpers/l10n';\nimport { ActionsDropdownItem } from '../../../components/controls/ActionsDropdown';\n\ninterface Props {\n  measure: CustomMeasure;\n  onEdit: (data: { description: string; id: string; value: string }) => Promise<void>;\n}\n\ninterface State {\n  modal: boolean;\n}\n\nexport default class EditButton extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { modal: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleClick = () => {\n    this.setState({ modal: true });\n  };\n\n  handleClose = () => {\n    if (this.mounted) {\n      this.setState({ modal: false });\n    }\n  };\n\n  handleSubmit = (data: { description: string; value: string }) => {\n    return this.props.onEdit({ id: this.props.measure.id, ...data });\n  };\n\n  render() {\n    return (\n      <>\n        <ActionsDropdownItem className=\"js-custom-measure-update\" onClick={this.handleClick}>\n          {translate('update_verb')}\n        </ActionsDropdownItem>\n        {this.state.modal && (\n          <Form\n            confirmButtonText={translate('update_verb')}\n            header={translate('custom_measures.update_custom_measure')}\n            measure={this.props.measure}\n            onClose={this.handleClose}\n            onSubmit={this.handleSubmit}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { sortBy } from 'lodash';\nimport DeleteButton from './DeleteButton';\nimport EditButton from './EditButton';\nimport { CustomMeasure } from '../../../app/types';\nimport ActionsDropdown, {\n  ActionsDropdownDivider\n} from '../../../components/controls/ActionsDropdown';\nimport { translate } from '../../../helpers/l10n';\nimport Tooltip from '../../../components/controls/Tooltip';\nimport { formatMeasure } from '../../../helpers/measures';\nimport DateFormatter from '../../../components/intl/DateFormatter';\n\ninterface Props {\n  measures: CustomMeasure[];\n  onDelete: (measureId: string) => Promise<void>;\n  onEdit: (data: { description: string; id: string; value: string }) => Promise<void>;\n}\n\nexport default function List({ measures, onDelete, onEdit }: Props) {\n  return (\n    <div className=\"boxed-group boxed-group-inner\" id=\"custom-measures-list\">\n      {measures.length > 0 ? (\n        <table className=\"data zebra zebra-hover\">\n          <thead>\n            <tr>\n              <th>{translate('custom_measures.metric')}</th>\n              <th>{translate('value')}</th>\n              <th>{translate('description')}</th>\n              <th>{translate('date')}</th>\n              <th />\n            </tr>\n          </thead>\n          <tbody>\n            {sortBy(measures, measure => measure.metric.name.toLowerCase()).map(measure => (\n              <tr data-metric={measure.metric.key} key={measure.id}>\n                <td className=\"nowrap\">\n                  <div>\n                    <span className=\"js-custom-measure-metric-name\">{measure.metric.name}</span>\n                    {measure.pending && (\n                      <Tooltip overlay={translate('custom_measures.pending_tooltip')}>\n                        <span className=\"js-custom-measure-pending badge badge-warning spacer-left\">\n                          {translate('custom_measures.pending')}\n                        </span>\n                      </Tooltip>\n                    )}\n                  </div>\n                  <span className=\"js-custom-measure-domain note\">{measure.metric.domain}</span>\n                </td>\n\n                <td className=\"nowrap\">\n                  <strong className=\"js-custom-measure-value\">\n                    {formatMeasure(measure.value, measure.metric.type)}\n                  </strong>\n                </td>\n\n                <td>\n                  <span className=\"js-custom-measure-description\">{measure.description}</span>\n                </td>\n\n                <td>\n                  <MeasureDate measure={measure} /> {translate('by_')}{' '}\n                  <span className=\"js-custom-measure-user\">{measure.user.name}</span>\n                </td>\n\n                <td className=\"thin nowrap\">\n                  <ActionsDropdown>\n                    <EditButton measure={measure} onEdit={onEdit} />\n                    <ActionsDropdownDivider />\n                    <DeleteButton measure={measure} onDelete={onDelete} />\n                  </ActionsDropdown>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>{translate('no_results')}</p>\n      )}\n    </div>\n  );\n}\n\nfunction MeasureDate({ measure }: { measure: CustomMeasure }) {\n  if (measure.updatedAt) {\n    return (\n      <>\n        {translate('updated_on')}{' '}\n        <span className=\"js-custom-measure-created-at\">\n          <DateFormatter date={measure.updatedAt} />\n        </span>\n      </>\n    );\n  } else if (measure.createdAt) {\n    return (\n      <>\n        {translate('created_on')}{' '}\n        <span className=\"js-custom-measure-created-at\">\n          <DateFormatter date={measure.createdAt} />\n        </span>\n      </>\n    );\n  } else {\n    return <>{translate('created')}</>;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport Header from './Header';\nimport List from './List';\nimport {\n  getCustomMeasures,\n  createCustomMeasure,\n  updateCustomMeasure,\n  deleteCustomMeasure\n} from '../../../api/measures';\nimport { Paging, CustomMeasure } from '../../../app/types';\nimport ListFooter from '../../../components/controls/ListFooter';\nimport { translate } from '../../../helpers/l10n';\n\ninterface Props {\n  component: { key: string };\n}\n\ninterface State {\n  loading: boolean;\n  measures?: CustomMeasure[];\n  paging?: Paging;\n}\n\nconst PAGE_SIZE = 50;\n\nexport default class App extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: true };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchMeasures();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchMeasures = () => {\n    this.setState({ loading: true });\n    getCustomMeasures({ projectKey: this.props.component.key, ps: PAGE_SIZE }).then(\n      ({ customMeasures, paging }) => {\n        if (this.mounted) {\n          this.setState({ loading: false, measures: customMeasures, paging });\n        }\n      },\n      this.stopLoading\n    );\n  };\n\n  fetchMore = () => {\n    const { paging } = this.state;\n    if (paging) {\n      this.setState({ loading: true });\n      getCustomMeasures({\n        projectKey: this.props.component.key,\n        p: paging.pageIndex + 1,\n        ps: PAGE_SIZE\n      }).then(({ customMeasures, paging }) => {\n        if (this.mounted) {\n          this.setState(({ measures = [] }: State) => ({\n            loading: false,\n            measures: [...measures, ...customMeasures],\n            paging\n          }));\n        }\n      }, this.stopLoading);\n    }\n  };\n\n  stopLoading = () => {\n    if (this.mounted) {\n      this.setState({ loading: false });\n    }\n  };\n\n  handleCreate = (data: { description: string; metricKey: string; value: string }) => {\n    return createCustomMeasure({ ...data, projectKey: this.props.component.key }).then(measure => {\n      if (this.mounted) {\n        this.setState(({ measures = [], paging }: State) => ({\n          measures: [...measures, measure],\n          paging: paging && { ...paging, total: paging.total + 1 }\n        }));\n      }\n    });\n  };\n\n  handleEdit = (data: { description: string; id: string; value: string }) => {\n    return updateCustomMeasure(data).then(() => {\n      if (this.mounted) {\n        this.setState(({ measures = [] }: State) => ({\n          measures: measures.map(\n            measure => (measure.id === data.id ? { ...measure, ...data } : measure)\n          )\n        }));\n      }\n    });\n  };\n\n  handleDelete = (measureId: string) => {\n    return deleteCustomMeasure({ id: measureId }).then(() => {\n      if (this.mounted) {\n        this.setState(({ measures = [], paging }: State) => ({\n          measures: measures.filter(measure => measure.id !== measureId),\n          paging: paging && { ...paging, total: paging.total - 1 }\n        }));\n      }\n    });\n  };\n\n  render() {\n    const { loading, measures, paging } = this.state;\n\n    return (\n      <>\n        <Helmet title={translate('custom_measures.page')} />\n        <div className=\"page page-limited\">\n          <Header\n            loading={loading}\n            onCreate={this.handleCreate}\n            skipMetrics={measures && measures.map(measure => measure.metric.key)}\n          />\n          {measures && (\n            <List measures={measures} onDelete={this.handleDelete} onEdit={this.handleEdit} />\n          )}\n          {measures &&\n            paging && (\n              <ListFooter\n                count={measures.length}\n                loadMore={this.fetchMore}\n                ready={!loading}\n                total={paging.total}\n              />\n            )}\n        </div>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}