{"version":3,"sources":["webpack:///./src/main/js/components/shared/Organization.tsx","webpack:///./src/main/js/apps/account/notifications/NotificationsList.js","webpack:///./src/main/js/apps/account/notifications/actions.js","webpack:///./src/main/js/api/notifications.ts","webpack:///./src/main/js/apps/account/notifications/GlobalNotifications.js","webpack:///./src/main/js/apps/account/notifications/ProjectNotifications.js","webpack:///./src/main/js/apps/account/notifications/Projects.js","webpack:///./src/main/js/apps/account/notifications/Notifications.js"],"names":["_ui_OrganizationLink__WEBPACK_IMPORTED_MODULE_3__","__webpack_require__","Organization","props","_a","link","organization","shouldBeDisplayed","react__WEBPACK_IMPORTED_MODULE_0__","className","linkClassName","name","Object","react_redux__WEBPACK_IMPORTED_MODULE_1__","state","ownProps","_store_rootReducer__WEBPACK_IMPORTED_MODULE_2__","organizationKey","_super","NotificationsList","this","NotificationsList_extends","prototype","isEnabled","type","channel","notifications","find","notification","handleCheck","checked","onAdd","onRemove","getDispatcherLabel","dispatcher","globalMessageKey","projectMessageKey","concat","project","l10n","apply","render","_this","channels","checkboxId","types","index_js_exposed_default","a","createElement","map","key","Checkbox","id","onCheck","PureComponent","actions_addNotification","n","dispatch","data","assign","request","then","duck","rootActions","actions_removeNotification","GlobalNotifications_GlobalNotifications","notifications_NotificationsList","d","c","addNotification","removeNotification","GlobalNotifications_mapDispatchToProps","es","rootReducer","ProjectNotifications_ProjectNotifications","ProjectNotifications","ProjectNotifications_extends","handleAddNotification","projectName","handleRemoveNotification","react_router_es","to","urls","ProjectNotifications_mapDispatchToProps","notifications_ProjectNotifications","Projects_Projects","Projects","arguments","addedProjects","loadOptions","query","cb","length","options","components","r","projects","results","domain","q","items","value","label","handleAddProject","selected","setState","renderOption","option","Projects_extends","componentWillReceiveProps","nextProps","nextAddedProjects","lodash_js_exposed","allProjects","Select","autoload","cache","style","width","minimumInput","optionRenderer","onChange","placeholder","notifications_Projects","Notifications_Notifications","Notifications","Notifications_extends","componentDidMount","fetchNotifications","Helmet_default","title","notifications_GlobalNotifications","Notifications_mapDispatchToProps","response","organizations","filter","globalTypes","perProjectTypes","Notifications_UnconnectedNotifications","__webpack_exports__"],"mappings":"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","file":"js/257.a879aec5.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getOrganizationByKey, areThereCustomOrganizations } from '../../store/rootReducer';\nimport OrganizationLink from '../ui/OrganizationLink';\n\ninterface OwnProps {\n  organizationKey: string;\n}\n\ninterface Props {\n  link?: boolean;\n  linkClassName?: string;\n  organization: { key: string; name: string } | null;\n  shouldBeDisplayed: boolean;\n}\n\nfunction Organization(props: Props) {\n  const { link = true, organization, shouldBeDisplayed } = props;\n\n  if (!shouldBeDisplayed || !organization) {\n    return null;\n  }\n\n  return (\n    <span>\n      {link ? (\n        <OrganizationLink className={props.linkClassName} organization={organization}>\n          {organization.name}\n        </OrganizationLink>\n      ) : (\n        organization.name\n      )}\n      <span className=\"slash-separator\" />\n    </span>\n  );\n}\n\nconst mapStateToProps = (state: any, ownProps: OwnProps) => ({\n  organization: getOrganizationByKey(state, ownProps.organizationKey),\n  shouldBeDisplayed: areThereCustomOrganizations(state)\n});\n\nexport default connect<any, any, any>(mapStateToProps)(Organization);\n\nexport const UnconnectedOrganization = Organization;\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport React from 'react';\nimport Checkbox from '../../../components/controls/Checkbox';\nimport { translate, hasMessage } from '../../../helpers/l10n';\n/*:: import type {\n  Notification,\n  NotificationsState,\n  ChannelsState,\n  TypesState\n} from '../../../store/notifications/duck'; */\n\nexport default class NotificationsList extends React.PureComponent {\n  /*:: props: {\n    onAdd: (n: Notification) => void,\n    onRemove: (n: Notification) => void,\n    channels: ChannelsState,\n    checkboxId: (string, string) => string,\n    project?: boolean,\n    types: TypesState,\n    notifications: NotificationsState\n  };\n*/\n\n  isEnabled(type /*: string */, channel /*: string */) /*: boolean */ {\n    return !!this.props.notifications.find(\n      notification => notification.type === type && notification.channel === channel\n    );\n  }\n\n  handleCheck(type /*: string */, channel /*: string */, checked /*: boolean */) {\n    if (checked) {\n      this.props.onAdd({ type, channel });\n    } else {\n      this.props.onRemove({ type, channel });\n    }\n  }\n\n  getDispatcherLabel(dispatcher /*: string */) {\n    const globalMessageKey = ['notification.dispatcher', dispatcher];\n    const projectMessageKey = [...globalMessageKey, 'project'];\n    const shouldUseProjectMessage = this.props.project && hasMessage(...projectMessageKey);\n    return shouldUseProjectMessage\n      ? translate(...projectMessageKey)\n      : translate(...globalMessageKey);\n  }\n\n  render() {\n    const { channels, checkboxId, types } = this.props;\n\n    return (\n      <tbody>\n        {types.map(type => (\n          <tr key={type}>\n            <td>{this.getDispatcherLabel(type)}</td>\n            {channels.map(channel => (\n              <td key={channel} className=\"text-center\">\n                <Checkbox\n                  checked={this.isEnabled(type, channel)}\n                  id={checkboxId(type, channel)}\n                  onCheck={checked => this.handleCheck(type, channel, checked)}\n                />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// @flow\nimport * as api from '../../../api/notifications';\n/*:: import type { GetNotificationsResponse } from '../../../api/notifications'; */\nimport { onFail, fetchOrganizations } from '../../../store/rootActions';\nimport {\n  receiveNotifications,\n  addNotification as addNotificationAction,\n  removeNotification as removeNotificationAction\n} from '../../../store/notifications/duck';\n/*:: import type { Notification } from '../../../store/notifications/duck'; */\n\nexport const fetchNotifications = () => (dispatch /*: Function */) => {\n  const onFulfil = (response /*: GetNotificationsResponse */) => {\n    const organizations = response.notifications\n      .filter(n => n.organization)\n      .map(n => n.organization);\n\n    dispatch(fetchOrganizations(organizations)).then(() => {\n      dispatch(\n        receiveNotifications(\n          response.notifications,\n          response.channels,\n          response.globalTypes,\n          response.perProjectTypes\n        )\n      );\n    });\n  };\n\n  return api.getNotifications().then(onFulfil, onFail(dispatch));\n};\n\nexport const addNotification = (n /*: Notification */) => (dispatch /*: Function */) =>\n  api\n    .addNotification(n.channel, n.type, n.project)\n    .then(() => dispatch(addNotificationAction(n)), onFail(dispatch));\n\nexport const removeNotification = (n /*: Notification */) => (dispatch /*: Function */) =>\n  api\n    .removeNotification(n.channel, n.type, n.project)\n    .then(() => dispatch(removeNotificationAction(n)), onFail(dispatch));\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, RequestData } from '../helpers/request';\n\nexport interface GetNotificationsResponse {\n  notifications: Array<{\n    channel: string;\n    type: string;\n    organization?: string;\n    project?: string;\n    projectName?: string;\n  }>;\n  channels: Array<string>;\n  globalTypes: Array<string>;\n  perProjectTypes: Array<string>;\n}\n\nexport function getNotifications(): Promise<GetNotificationsResponse> {\n  return getJSON('/api/notifications/list');\n}\n\nexport function addNotification(channel: string, type: string, project?: string): Promise<void> {\n  const data: RequestData = { channel, type };\n  if (project) {\n    Object.assign(data, { project });\n  }\n  return post('/api/notifications/add', data);\n}\n\nexport function removeNotification(channel: string, type: string, project?: string): Promise<void> {\n  const data: RequestData = { channel, type };\n  if (project) {\n    Object.assign(data, { project });\n  }\n  return post('/api/notifications/remove', data);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport NotificationsList from './NotificationsList';\nimport { addNotification, removeNotification } from './actions';\nimport { translate } from '../../../helpers/l10n';\nimport {\n  getGlobalNotifications,\n  getNotificationChannels,\n  getNotificationGlobalTypes\n} from '../../../store/rootReducer';\n/*:: import type {\n  Notification,\n  NotificationsState,\n  ChannelsState,\n  TypesState\n} from '../../../store/notifications/duck'; */\n\n/*::\ntype Props = {\n  notifications: NotificationsState,\n  channels: ChannelsState,\n  types: TypesState,\n  addNotification: (n: Notification) => void,\n  removeNotification: (n: Notification) => void\n};\n*/\n\nfunction GlobalNotifications(props /*: Props */) {\n  return (\n    <section className=\"boxed-group\">\n      <h2>{translate('my_profile.overall_notifications.title')}</h2>\n\n      <div className=\"boxed-group-inner\">\n        <table className=\"form\">\n          <thead>\n            <tr>\n              <th />\n              {props.channels.map(channel => (\n                <th key={channel} className=\"text-center\">\n                  <h4>{translate('notification.channel', channel)}</h4>\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <NotificationsList\n            notifications={props.notifications}\n            channels={props.channels}\n            types={props.types}\n            checkboxId={(d, c) => `global-notification-${d}-${c}`}\n            onAdd={props.addNotification}\n            onRemove={props.removeNotification}\n          />\n        </table>\n      </div>\n    </section>\n  );\n}\n\nconst mapStateToProps = state => ({\n  notifications: getGlobalNotifications(state),\n  channels: getNotificationChannels(state),\n  types: getNotificationGlobalTypes(state)\n});\n\nconst mapDispatchToProps = { addNotification, removeNotification };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalNotifications);\n\nexport const UnconnectedGlobalNotifications = GlobalNotifications;\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport NotificationsList from './NotificationsList';\nimport { addNotification, removeNotification } from './actions';\nimport Organization from '../../../components/shared/Organization';\nimport { translate } from '../../../helpers/l10n';\nimport {\n  getProjectNotifications,\n  getNotificationChannels,\n  getNotificationPerProjectTypes\n} from '../../../store/rootReducer';\n/*:: import type {\n  Notification,\n  NotificationsState,\n  ChannelsState,\n  TypesState\n} from '../../../store/notifications/duck'; */\nimport { getProjectUrl } from '../../../helpers/urls';\n\nclass ProjectNotifications extends React.PureComponent {\n  /*:: props: {\n    project: {\n      key: string,\n      name: string,\n      organization: string\n    },\n    notifications: NotificationsState,\n    channels: ChannelsState,\n    types: TypesState,\n    addNotification: (n: Notification) => void,\n    removeNotification: (n: Notification) => void\n  };\n*/\n\n  handleAddNotification({ channel, type }) {\n    this.props.addNotification({\n      channel,\n      type,\n      project: this.props.project.key,\n      projectName: this.props.project.name,\n      organization: this.props.project.organization\n    });\n  }\n\n  handleRemoveNotification({ channel, type }) {\n    this.props.removeNotification({\n      channel,\n      type,\n      project: this.props.project.key\n    });\n  }\n\n  render() {\n    const { project, channels } = this.props;\n\n    return (\n      <table key={project.key} className=\"form big-spacer-bottom\">\n        <thead>\n          <tr>\n            <th>\n              <span className=\"text-normal\">\n                <Organization organizationKey={project.organization} />\n              </span>\n              <h4 className=\"display-inline-block\">\n                <Link to={getProjectUrl(project.key)}>{project.name}</Link>\n              </h4>\n            </th>\n            {channels.map(channel => (\n              <th key={channel} className=\"text-center\">\n                <h4>{translate('notification.channel', channel)}</h4>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <NotificationsList\n          notifications={this.props.notifications}\n          channels={this.props.channels}\n          types={this.props.types}\n          checkboxId={(d, c) => `project-notification-${project.key}-${d}-${c}`}\n          onAdd={n => this.handleAddNotification(n)}\n          onRemove={n => this.handleRemoveNotification(n)}\n          project={true}\n        />\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  notifications: getProjectNotifications(state, ownProps.project.key),\n  channels: getNotificationChannels(state),\n  types: getNotificationPerProjectTypes(state)\n});\n\nconst mapDispatchToProps = { addNotification, removeNotification };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectNotifications);\n\nexport const UnconnectedProjectNotifications = ProjectNotifications;\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { differenceBy } from 'lodash';\nimport ProjectNotifications from './ProjectNotifications';\nimport { AsyncSelect } from '../../../components/controls/Select';\nimport Organization from '../../../components/shared/Organization';\nimport { translate } from '../../../helpers/l10n';\nimport { getSuggestions } from '../../../api/components';\nimport { getProjectsWithNotifications } from '../../../store/rootReducer';\n\n/*::\ntype Props = {\n  projects: Array<{\n    key: string,\n    name: string\n  }>\n};\n*/\n\n/*::\ntype State = {\n  addedProjects: Array<{\n    key: string,\n    name: string\n  }>\n};\n*/\n\nclass Projects extends React.PureComponent {\n  /*:: props: Props; */\n\n  state /*: State */ = {\n    addedProjects: []\n  };\n\n  componentWillReceiveProps(nextProps /*: Props */) {\n    // remove all projects from `this.state.addedProjects`\n    // that already exist in `nextProps.projects`\n    const nextAddedProjects = differenceBy(\n      this.state.addedProjects,\n      nextProps.projects,\n      project => project.key\n    );\n\n    if (nextAddedProjects.length !== this.state.addedProjects) {\n      this.setState({ addedProjects: nextAddedProjects });\n    }\n  }\n\n  loadOptions = (query, cb) => {\n    if (query.length < 2) {\n      cb(null, { options: [] });\n      return;\n    }\n\n    getSuggestions(query)\n      .then(r => {\n        const projects = r.results.find(domain => domain.q === 'TRK');\n        return projects ? projects.items : [];\n      })\n      .then(projects =>\n        projects.map(project => ({\n          value: project.key,\n          label: project.name,\n          organization: project.organization\n        }))\n      )\n      .then(options => {\n        cb(null, { options });\n      });\n  };\n\n  handleAddProject = selected => {\n    const project = {\n      key: selected.value,\n      name: selected.label,\n      organization: selected.organization\n    };\n    this.setState({\n      addedProjects: [...this.state.addedProjects, project]\n    });\n  };\n\n  renderOption = option => {\n    return (\n      <span>\n        <Organization organizationKey={option.organization} link={false} />\n        <strong>{option.label}</strong>\n      </span>\n    );\n  };\n\n  render() {\n    const allProjects = [...this.props.projects, ...this.state.addedProjects];\n\n    return (\n      <section className=\"boxed-group\">\n        <h2>{translate('my_profile.per_project_notifications.title')}</h2>\n\n        <div className=\"boxed-group-inner\">\n          {allProjects.length === 0 && (\n            <div className=\"note\">{translate('my_account.no_project_notifications')}</div>\n          )}\n\n          {allProjects.map(project => <ProjectNotifications key={project.key} project={project} />)}\n\n          <div className=\"spacer-top panel bg-muted\">\n            <span className=\"text-middle spacer-right\">\n              {translate('my_account.set_notifications_for')}:\n            </span>\n            <AsyncSelect\n              autoload={false}\n              cache={false}\n              name=\"new_project\"\n              style={{ width: '300px' }}\n              loadOptions={this.loadOptions}\n              minimumInput={2}\n              optionRenderer={this.renderOption}\n              onChange={this.handleAddProject}\n              placeholder={translate('my_account.search_project')}\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  projects: getProjectsWithNotifications(state)\n});\n\nexport default connect(mapStateToProps)(Projects);\n\nexport const UnconnectedProjects = Projects;\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// @flow\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport GlobalNotifications from './GlobalNotifications';\nimport Projects from './Projects';\nimport { fetchNotifications } from './actions';\nimport { translate } from '../../../helpers/l10n';\n\nclass Notifications extends React.PureComponent {\n  /*:: props: {\n    fetchNotifications: () => void\n  };\n*/\n\n  componentDidMount() {\n    this.props.fetchNotifications();\n  }\n\n  render() {\n    return (\n      <div className=\"account-body account-container\">\n        <Helmet title={translate('my_account.notifications')} />\n        <p className=\"alert alert-info\">{translate('notification.dispatcher.information')}</p>\n        <GlobalNotifications />\n        <Projects />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = { fetchNotifications };\n\nexport default connect(null, mapDispatchToProps)(Notifications);\n\nexport const UnconnectedNotifications = Notifications;\n"],"sourceRoot":""}