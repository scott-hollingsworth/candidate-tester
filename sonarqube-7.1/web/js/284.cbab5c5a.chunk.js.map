{"version":3,"sources":["webpack:///./src/main/js/apps/quality-profiles/components/ProfileNotFound.tsx","webpack:///./src/main/js/apps/quality-profiles/details/ProfileHeader.tsx","webpack:///./src/main/js/apps/quality-profiles/components/ProfileContainer.tsx"],"names":["ProfileNotFound_ProfileNotFound","props","index_js_exposed","className","es","to","Object","utils","organization","l10n","_super","ProfileHeader","this","ProfileHeader_extends","prototype","renderUpdateDate","profile","inner","ProfileDate","date","userUpdatedAt","renderUsageDate","lastUsed","render","_a","language","languageName","ProfileLink","name","isBuiltIn","BuiltInQualityProfileBadge","tooltip","style","lineHeight","ProfileActions","onRequestFail","updateProfiles","ProfileContainer_ProfileContainer","ProfileContainer","ProfileContainer_extends","componentDidMount","location","profiles","router","query","key","find","replace","pathname","other","ProfileContainer_rest","_b","child","children","ProfileContainer_assign","id","Helmet_default","a","title","details_ProfileHeader"],"mappings":"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","file":"js/284.cbab5c5a.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { IndexLink } from 'react-router';\nimport { translate } from '../../../helpers/l10n';\nimport { getProfilesPath } from '../utils';\n\ninterface Props {\n  organization: string | null;\n}\n\nexport default function ProfileNotFound(props: Props) {\n  return (\n    <div className=\"quality-profile-not-found\">\n      <div className=\"note spacer-bottom\">\n        <IndexLink to={getProfilesPath(props.organization)} className=\"text-muted\">\n          {translate('quality_profiles.page')}\n        </IndexLink>\n      </div>\n\n      <div>{translate('quality_profiles.not_found')}</div>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Link, IndexLink } from 'react-router';\nimport ProfileLink from '../components/ProfileLink';\nimport ProfileActions from '../components/ProfileActions';\nimport ProfileDate from '../components/ProfileDate';\nimport BuiltInQualityProfileBadge from '../components/BuiltInQualityProfileBadge';\nimport { translate } from '../../../helpers/l10n';\nimport {\n  isStagnant,\n  getProfilesPath,\n  getProfilesForLanguagePath,\n  getProfileChangelogPath\n} from '../utils';\nimport { Profile } from '../types';\n\ninterface Props {\n  onRequestFail: (reasong: any) => void;\n  profile: Profile;\n  organization: string | null;\n  updateProfiles: () => Promise<void>;\n}\n\nexport default class ProfileHeader extends React.PureComponent<Props> {\n  renderUpdateDate() {\n    const { profile } = this.props;\n    let inner = (\n      <span>\n        {translate('quality_profiles.updated_')} <ProfileDate date={profile.userUpdatedAt} />\n      </span>\n    );\n    if (isStagnant(profile)) {\n      inner = <span className=\"badge badge-normal-size badge-focus\">{inner}</span>;\n    }\n    return <li className=\"small spacer-right\">{inner}</li>;\n  }\n\n  renderUsageDate() {\n    const { profile } = this.props;\n    let inner = (\n      <span>\n        {translate('quality_profiles.used_')} <ProfileDate date={profile.lastUsed} />\n      </span>\n    );\n    if (!profile.lastUsed) {\n      inner = <span className=\"badge badge-normal-size badge-focus\">{inner}</span>;\n    }\n\n    return <li className=\"small big-spacer-right\">{inner}</li>;\n  }\n\n  render() {\n    const { organization, profile } = this.props;\n\n    return (\n      <header className=\"page-header quality-profile-header\">\n        <div className=\"note spacer-bottom\">\n          <IndexLink to={getProfilesPath(organization)} className=\"text-muted\">\n            {translate('quality_profiles.page')}\n          </IndexLink>\n          {' / '}\n          <Link\n            to={getProfilesForLanguagePath(profile.language, organization)}\n            className=\"text-muted\">\n            {profile.languageName}\n          </Link>\n        </div>\n\n        <h1 className=\"page-title\">\n          <ProfileLink\n            className=\"link-base-color\"\n            language={profile.language}\n            name={profile.name}\n            organization={organization}>\n            <span>{profile.name}</span>\n          </ProfileLink>\n          {profile.isBuiltIn && (\n            <BuiltInQualityProfileBadge className=\"spacer-left\" tooltip={false} />\n          )}\n        </h1>\n\n        <div className=\"pull-right\">\n          <ul className=\"list-inline\" style={{ lineHeight: '24px' }}>\n            {this.renderUpdateDate()}\n            {this.renderUsageDate()}\n            <li>\n              <Link\n                to={getProfileChangelogPath(profile.name, profile.language, organization)}\n                className=\"button\">\n                {translate('changelog')}\n              </Link>\n            </li>\n            <li>\n              <ProfileActions\n                className=\"pull-left\"\n                onRequestFail={this.props.onRequestFail}\n                organization={organization}\n                profile={profile}\n                updateProfiles={this.props.updateProfiles}\n              />\n            </li>\n          </ul>\n        </div>\n\n        {profile.isBuiltIn && (\n          <div className=\"page-description\">\n            {translate('quality_profiles.built_in.description.1')}\n            <br />\n            {translate('quality_profiles.built_in.description.2')}\n          </div>\n        )}\n      </header>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { WithRouterProps } from 'react-router';\nimport ProfileNotFound from './ProfileNotFound';\nimport ProfileHeader from '../details/ProfileHeader';\nimport { Profile } from '../types';\n\ninterface Props {\n  children: React.ReactElement<any>;\n  location: {\n    pathname: string;\n    query: { key?: string; language: string; name: string };\n  };\n  onRequestFail: (reasong: any) => void;\n  organization: string | null;\n  profiles: Profile[];\n  updateProfiles: () => Promise<void>;\n}\n\nexport default class ProfileContainer extends React.PureComponent<Props & WithRouterProps> {\n  componentDidMount() {\n    const { location, profiles, router } = this.props;\n    if (location.query.key) {\n      // try to find a quality profile with the given key\n      // if managed to find one, redirect to a new version\n      // otherwise do nothing, `render` will show not found page\n      const profile = profiles.find(profile => profile.key === location.query.key);\n      if (profile) {\n        router.replace({\n          pathname: location.pathname,\n          query: { language: profile.language, name: profile.name }\n        });\n      }\n    }\n  }\n\n  render() {\n    const { organization, profiles, location, ...other } = this.props;\n    const { key, language, name } = location.query;\n\n    if (key) {\n      // if there is a `key` parameter,\n      // then if we managed to find a quality profile with this key\n      // then we will be redirected in `componentDidMount`\n      // otherwise show `ProfileNotFound`\n      const profile = profiles.find(profile => profile.key === location.query.key);\n      return profile ? null : <ProfileNotFound organization={organization} />;\n    }\n\n    const profile = profiles.find(\n      profile => profile.language === language && profile.name === name\n    );\n\n    if (!profile) {\n      return <ProfileNotFound organization={organization} />;\n    }\n\n    const child = React.cloneElement(this.props.children, {\n      onRequestFail: this.props.onRequestFail,\n      organization,\n      profile,\n      profiles,\n      ...other\n    });\n\n    return (\n      <div id=\"quality-profile\">\n        <Helmet title={profile.name} />\n        <ProfileHeader\n          onRequestFail={this.props.onRequestFail}\n          organization={organization}\n          profile={profile}\n          updateProfiles={this.props.updateProfiles}\n        />\n        {child}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}